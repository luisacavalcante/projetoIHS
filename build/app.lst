
build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000198  00000000004003e8  00000000004003e8  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000119  0000000000400580  0000000000400580  00000580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000022  000000000040069a  000000000040069a  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000030  00000000004006c0  00000000004006c0  000006c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000048  00000000004006f0  00000000004006f0  000006f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000138  0000000000400738  0000000000400738  00000738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000401000  0000000000401000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000000e0  0000000000401020  0000000000401020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         000004e5  0000000000401100  0000000000401100  00001100  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  00000000004015e8  00000000004015e8  000015e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000010f  0000000000402000  0000000000402000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000003c  0000000000402110  0000000000402110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000d0  0000000000402150  0000000000402150  00002150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000403db0  0000000000403db0  00002db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000403db8  0000000000403db8  00002db8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000230  0000000000403dc0  0000000000403dc0  00002dc0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000010  0000000000403ff0  0000000000403ff0  00002ff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt      00000080  0000000000404000  0000000000404000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000004  0000000000404080  0000000000404080  00003080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000010  00000000004040a0  00000000004040a0  00003084  2**5
                  ALLOC
 25 .comment      0000002e  0000000000000000  0000000000000000  00003084  2**0
                  CONTENTS, READONLY
 26 .gnu.build.attributes 00001d1c  00000000004060b0  00000000004060b0  000030b4  2**2
                  CONTENTS, READONLY, OCTETS
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   00000ef2  0000000000000000  0000000000000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 00000268  0000000000000000  0000000000000000  00005d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   000002b7  0000000000000000  0000000000000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    000004af  0000000000000000  0000000000000000  00006221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000152  0000000000000000  0000000000000000  000066d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 000000e7  0000000000000000  0000000000000000  00006822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 00000062  0000000000000000  0000000000000000  00006909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e9 2f 00 00 	mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__@Base>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	call   *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000401020 <printf@plt-0x10>:
  401020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <printf@plt>:
  401030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 404018 <printf@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	push   $0x0
  40103b:	e9 e0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401040 <Mix_PlayChannelTimed@plt>:
  401040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 404020 <Mix_PlayChannelTimed@Base>
  401046:	68 01 00 00 00       	push   $0x1
  40104b:	e9 d0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401050 <write@plt>:
  401050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 404028 <write@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	push   $0x2
  40105b:	e9 c0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401060 <SDL_RWFromFile@plt>:
  401060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 404030 <SDL_RWFromFile@Base>
  401066:	68 03 00 00 00       	push   $0x3
  40106b:	e9 b0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401070 <Mix_OpenAudio@plt>:
  401070:	ff 25 c2 2f 00 00    	jmp    *0x2fc2(%rip)        # 404038 <Mix_OpenAudio@Base>
  401076:	68 04 00 00 00       	push   $0x4
  40107b:	e9 a0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401080 <open@plt>:
  401080:	ff 25 ba 2f 00 00    	jmp    *0x2fba(%rip)        # 404040 <open@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	push   $0x5
  40108b:	e9 90 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401090 <sleep@plt>:
  401090:	ff 25 b2 2f 00 00    	jmp    *0x2fb2(%rip)        # 404048 <sleep@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	push   $0x6
  40109b:	e9 80 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010a0 <Mix_Init@plt>:
  4010a0:	ff 25 aa 2f 00 00    	jmp    *0x2faa(%rip)        # 404050 <Mix_Init@Base>
  4010a6:	68 07 00 00 00       	push   $0x7
  4010ab:	e9 70 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010b0 <ioctl@plt>:
  4010b0:	ff 25 a2 2f 00 00    	jmp    *0x2fa2(%rip)        # 404058 <ioctl@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	push   $0x8
  4010bb:	e9 60 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010c0 <fprintf@plt>:
  4010c0:	ff 25 9a 2f 00 00    	jmp    *0x2f9a(%rip)        # 404060 <fprintf@GLIBC_2.2.5>
  4010c6:	68 09 00 00 00       	push   $0x9
  4010cb:	e9 50 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010d0 <read@plt>:
  4010d0:	ff 25 92 2f 00 00    	jmp    *0x2f92(%rip)        # 404068 <read@GLIBC_2.2.5>
  4010d6:	68 0a 00 00 00       	push   $0xa
  4010db:	e9 40 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010e0 <puts@plt>:
  4010e0:	ff 25 8a 2f 00 00    	jmp    *0x2f8a(%rip)        # 404070 <puts@GLIBC_2.2.5>
  4010e6:	68 0b 00 00 00       	push   $0xb
  4010eb:	e9 30 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010f0 <Mix_LoadWAV_RW@plt>:
  4010f0:	ff 25 82 2f 00 00    	jmp    *0x2f82(%rip)        # 404078 <Mix_LoadWAV_RW@Base>
  4010f6:	68 0c 00 00 00       	push   $0xc
  4010fb:	e9 20 ff ff ff       	jmp    401020 <_init+0x20>

Desmontagem da secção .text:

0000000000401100 <main>:

void LoadPiano(Mix_Chunk **Notes);
void LoadPianoStretched(Mix_Chunk **Notes);

int main(int argc, char** argv)
{
  401100:	55                   	push   %rbp
  401101:	48 89 f5             	mov    %rsi,%rbp
  401104:	53                   	push   %rbx
  401105:	89 fb                	mov    %edi,%ebx
    const uint32_t hex_c = 0xFFFFFF46, hex_a = 0xFFFFFF08, hex_g = 0xFFFFFF42, hex_f = 0xFFFFFF0E;

	// Quando apertar a nota, mostrar no display a nota em inglês


    	Mix_Init(MIX_INIT_MID);
  401107:	bf 20 00 00 00       	mov    $0x20,%edi
{
  40110c:	48 83 ec 58          	sub    $0x58,%rsp
    	Mix_Init(MIX_INIT_MID);
  401110:	e8 8b ff ff ff       	call   4010a0 <Mix_Init@plt>
	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);
  401115:	b9 00 08 00 00       	mov    $0x800,%ecx
  40111a:	ba 02 00 00 00       	mov    $0x2,%edx
  40111f:	be 10 80 00 00       	mov    $0x8010,%esi
  401124:	bf 44 ac 00 00       	mov    $0xac44,%edi
  401129:	e8 42 ff ff ff       	call   401070 <Mix_OpenAudio@plt>
	Mix_Chunk *Notes[NotesNUM];
	Mix_Chunk *NotesStretched[NotesNUM];

	LoadPiano(Notes);
  40112e:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  401133:	e8 98 03 00 00       	call   4014d0 <LoadPiano>
	LoadPianoStretched(NotesStretched);
  401138:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  40113d:	e8 1e 04 00 00       	call   401560 <LoadPianoStretched>

	//while(1) {
		//Mix_PlayChannel(2, Notes[3], 0);
	//}

	if (argc < 2) {
  401142:	83 fb 01             	cmp    $0x1,%ebx
  401145:	0f 8e 54 02 00 00    	jle    40139f <main+0x29f>
		printf("Syntax: %s <device file path>\n", argv[0]);
		return -EINVAL;
	}

	if ((fd = open(argv[1], O_RDWR)) < 0) {
  40114b:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  40114f:	be 02 00 00 00       	mov    $0x2,%esi
  401154:	31 c0                	xor    %eax,%eax
  401156:	e8 25 ff ff ff       	call   401080 <open@plt>
  40115b:	89 c3                	mov    %eax,%ebx
  40115d:	85 c0                	test   %eax,%eax
  40115f:	79 57                	jns    4011b8 <main+0xb8>
  401161:	e9 55 02 00 00       	jmp    4013bb <main+0x2bb>
  401166:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40116d:	00 00 00 
        unsigned int data_switch = 0;
		ioctl(fd, RD_SWITCHES);
	    read(fd, &data_switch, 1);
		if(data_switch > 0){
            unsigned int data_push = 0;
            ioctl(fd, RD_PBUTTONS);
  401170:	e8 3b ff ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  401175:	ba 01 00 00 00       	mov    $0x1,%edx
  40117a:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40117f:	89 df                	mov    %ebx,%edi
  401181:	e8 4a ff ff ff       	call   4010d0 <read@plt>
	        
			// Notas normais
			if(data_push == 14){
  401186:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40118a:	83 f8 0e             	cmp    $0xe,%eax
  40118d:	0f 84 75 01 00 00    	je     401308 <main+0x208>
                    //14 é o fá
				printf("botao 4\n");
				Mix_PlayChannel(2, Notes[3], 0);
					// Printar F no D7
			}
			if(data_push == 13){
  401193:	83 f8 0d             	cmp    $0xd,%eax
  401196:	0f 84 3c 01 00 00    	je     4012d8 <main+0x1d8>
                    //13 é o mi
				printf("botao 3\n");
				Mix_PlayChannel(2, Notes[2], 0);
					// Printar E no D7
			}
		if(data_push == 11){
  40119c:	83 f8 0b             	cmp    $0xb,%eax
  40119f:	0f 84 03 01 00 00    	je     4012a8 <main+0x1a8>
                    //11 é o ré
				printf("botao 2\n");
				Mix_PlayChannel(2, Notes[1], 0);
					// Printar D no D7
			}
			if(data_push == 7){
  4011a5:	83 f8 07             	cmp    $0x7,%eax
  4011a8:	0f 84 d2 00 00 00    	je     401280 <main+0x180>
				if(data_push == 7){
					Mix_PlayChannel(2, NotesStretched[0], 0);
					// Printar C no D7
				}
			}
        	sleep(2);
  4011ae:	bf 02 00 00 00       	mov    $0x2,%edi
  4011b3:	e8 d8 fe ff ff       	call   401090 <sleep@plt>
	    ioctl(fd, WR_GREEN_LEDS);
  4011b8:	be 66 61 00 00       	mov    $0x6166,%esi
  4011bd:	89 df                	mov    %ebx,%edi
  4011bf:	31 c0                	xor    %eax,%eax
        unsigned int data_green_led = 0xFFFFFFFF;
  4011c1:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  4011c8:	ff 
	    ioctl(fd, WR_GREEN_LEDS);
  4011c9:	e8 e2 fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_green_led, sizeof(data_green_led));
  4011ce:	ba 04 00 00 00       	mov    $0x4,%edx
  4011d3:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4011d8:	89 df                	mov    %ebx,%edi
  4011da:	e8 71 fe ff ff       	call   401050 <write@plt>
		ioctl(fd, RD_SWITCHES);
  4011df:	be 61 61 00 00       	mov    $0x6161,%esi
  4011e4:	89 df                	mov    %ebx,%edi
  4011e6:	31 c0                	xor    %eax,%eax
        unsigned int data_switch = 0;
  4011e8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  4011ef:	00 
		ioctl(fd, RD_SWITCHES);
  4011f0:	e8 bb fe ff ff       	call   4010b0 <ioctl@plt>
	    read(fd, &data_switch, 1);
  4011f5:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  4011fa:	89 df                	mov    %ebx,%edi
  4011fc:	ba 01 00 00 00       	mov    $0x1,%edx
  401201:	e8 ca fe ff ff       	call   4010d0 <read@plt>
		if(data_switch > 0){
  401206:	8b 44 24 08          	mov    0x8(%rsp),%eax
            ioctl(fd, RD_PBUTTONS);
  40120a:	be 62 61 00 00       	mov    $0x6162,%esi
  40120f:	89 df                	mov    %ebx,%edi
            unsigned int data_push = 0;
  401211:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  401218:	00 
		if(data_switch > 0){
  401219:	85 c0                	test   %eax,%eax
            ioctl(fd, RD_PBUTTONS);
  40121b:	b8 00 00 00 00       	mov    $0x0,%eax
		if(data_switch > 0){
  401220:	0f 85 4a ff ff ff    	jne    401170 <main+0x70>
            ioctl(fd, RD_PBUTTONS);
  401226:	e8 85 fe ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  40122b:	ba 01 00 00 00       	mov    $0x1,%edx
  401230:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  401235:	89 df                	mov    %ebx,%edi
  401237:	e8 94 fe ff ff       	call   4010d0 <read@plt>
				if(data_push == 14){
  40123c:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  401240:	83 f8 0e             	cmp    $0xe,%eax
  401243:	0f 84 37 01 00 00    	je     401380 <main+0x280>
				if(data_push == 13){
  401249:	83 f8 0d             	cmp    $0xd,%eax
  40124c:	0f 84 0e 01 00 00    	je     401360 <main+0x260>
				if(data_push == 11){
  401252:	83 f8 0b             	cmp    $0xb,%eax
  401255:	0f 84 dd 00 00 00    	je     401338 <main+0x238>
				if(data_push == 7){
  40125b:	83 f8 07             	cmp    $0x7,%eax
  40125e:	0f 85 4a ff ff ff    	jne    4011ae <main+0xae>
					Mix_PlayChannel(2, NotesStretched[0], 0);
  401264:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  401269:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40126e:	31 d2                	xor    %edx,%edx
  401270:	bf 02 00 00 00       	mov    $0x2,%edi
  401275:	e8 c6 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
  40127a:	e9 2f ff ff ff       	jmp    4011ae <main+0xae>
  40127f:	90                   	nop
				printf("botao 1\n");
  401280:	bf e2 20 40 00       	mov    $0x4020e2,%edi
  401285:	e8 56 fe ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[0], 0);
  40128a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40128f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401294:	31 d2                	xor    %edx,%edx
  401296:	bf 02 00 00 00       	mov    $0x2,%edi
  40129b:	e8 a0 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
  4012a0:	e9 09 ff ff ff       	jmp    4011ae <main+0xae>
  4012a5:	0f 1f 00             	nopl   (%rax)
				printf("botao 2\n");
  4012a8:	bf da 20 40 00       	mov    $0x4020da,%edi
  4012ad:	e8 2e fe ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[1], 0);
  4012b2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  4012b7:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4012bc:	31 d2                	xor    %edx,%edx
  4012be:	bf 02 00 00 00       	mov    $0x2,%edi
  4012c3:	e8 78 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
			if(data_push == 7){
  4012c8:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  4012cc:	e9 d4 fe ff ff       	jmp    4011a5 <main+0xa5>
  4012d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
				printf("botao 3\n");
  4012d8:	bf d2 20 40 00       	mov    $0x4020d2,%edi
  4012dd:	e8 fe fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[2], 0);
  4012e2:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4012e7:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4012ec:	31 d2                	xor    %edx,%edx
  4012ee:	bf 02 00 00 00       	mov    $0x2,%edi
  4012f3:	e8 48 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
		if(data_push == 11){
  4012f8:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  4012fc:	e9 9b fe ff ff       	jmp    40119c <main+0x9c>
  401301:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
				printf("botao 4\n");
  401308:	bf ca 20 40 00       	mov    $0x4020ca,%edi
  40130d:	e8 ce fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[3], 0);
  401312:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  401317:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40131c:	31 d2                	xor    %edx,%edx
  40131e:	bf 02 00 00 00       	mov    $0x2,%edi
  401323:	e8 18 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
			if(data_push == 13){
  401328:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40132c:	e9 62 fe ff ff       	jmp    401193 <main+0x93>
  401331:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
					Mix_PlayChannel(2, NotesStretched[1], 0);
  401338:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40133d:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401342:	31 d2                	xor    %edx,%edx
  401344:	bf 02 00 00 00       	mov    $0x2,%edi
  401349:	e8 f2 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
				if(data_push == 7){
  40134e:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  401352:	e9 04 ff ff ff       	jmp    40125b <main+0x15b>
  401357:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40135e:	00 00 
					Mix_PlayChannel(2, NotesStretched[2], 0);
  401360:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  401365:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40136a:	31 d2                	xor    %edx,%edx
  40136c:	bf 02 00 00 00       	mov    $0x2,%edi
  401371:	e8 ca fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
				if(data_push == 11){
  401376:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40137a:	e9 d3 fe ff ff       	jmp    401252 <main+0x152>
  40137f:	90                   	nop
					Mix_PlayChannel(2, NotesStretched[3], 0);
  401380:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  401385:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40138a:	31 d2                	xor    %edx,%edx
  40138c:	bf 02 00 00 00       	mov    $0x2,%edi
  401391:	e8 aa fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
				if(data_push == 13){
  401396:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40139a:	e9 aa fe ff ff       	jmp    401249 <main+0x149>
		printf("Syntax: %s <device file path>\n", argv[0]);
  40139f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  4013a3:	bf f0 20 40 00       	mov    $0x4020f0,%edi
  4013a8:	31 c0                	xor    %eax,%eax
  4013aa:	e8 81 fc ff ff       	call   401030 <printf@plt>
		return -EINVAL;
  4013af:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}

	close(fd);

	return 0;
}
  4013b4:	48 83 c4 58          	add    $0x58,%rsp
  4013b8:	5b                   	pop    %rbx
  4013b9:	5d                   	pop    %rbp
  4013ba:	c3                   	ret    
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  4013bb:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  4013bf:	48 8b 3d da 2c 00 00 	mov    0x2cda(%rip),%rdi        # 4040a0 <stderr@@GLIBC_2.2.5>
  4013c6:	be b3 20 40 00       	mov    $0x4020b3,%esi
  4013cb:	31 c0                	xor    %eax,%eax
  4013cd:	e8 ee fc ff ff       	call   4010c0 <fprintf@plt>
		return -EBUSY;
  4013d2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  4013d7:	eb db                	jmp    4013b4 <main+0x2b4>

00000000004013d9 <.annobin_abi_note.c.hot>:
  4013d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004013e0 <_start>:
  4013e0:	f3 0f 1e fa          	endbr64 
  4013e4:	31 ed                	xor    %ebp,%ebp
  4013e6:	49 89 d1             	mov    %rdx,%r9
  4013e9:	5e                   	pop    %rsi
  4013ea:	48 89 e2             	mov    %rsp,%rdx
  4013ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4013f1:	50                   	push   %rax
  4013f2:	54                   	push   %rsp
  4013f3:	45 31 c0             	xor    %r8d,%r8d
  4013f6:	31 c9                	xor    %ecx,%ecx
  4013f8:	48 c7 c7 00 11 40 00 	mov    $0x401100,%rdi
  4013ff:	ff 15 eb 2b 00 00    	call   *0x2beb(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.34>
  401405:	f4                   	hlt    

0000000000401406 <.annobin_abi_note.c>:
  401406:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40140d:	00 00 00 

0000000000401410 <_dl_relocate_static_pie>:
  401410:	f3 0f 1e fa          	endbr64 
  401414:	c3                   	ret    

0000000000401415 <.annobin__dl_relocate_static_pie.end>:
  401415:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40141c:	00 00 00 
  40141f:	90                   	nop

0000000000401420 <deregister_tm_clones>:
  401420:	b8 88 40 40 00       	mov    $0x404088,%eax
  401425:	48 3d 88 40 40 00    	cmp    $0x404088,%rax
  40142b:	74 13                	je     401440 <deregister_tm_clones+0x20>
  40142d:	b8 00 00 00 00       	mov    $0x0,%eax
  401432:	48 85 c0             	test   %rax,%rax
  401435:	74 09                	je     401440 <deregister_tm_clones+0x20>
  401437:	bf 88 40 40 00       	mov    $0x404088,%edi
  40143c:	ff e0                	jmp    *%rax
  40143e:	66 90                	xchg   %ax,%ax
  401440:	c3                   	ret    
  401441:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401448:	00 00 00 00 
  40144c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401450 <register_tm_clones>:
  401450:	be 88 40 40 00       	mov    $0x404088,%esi
  401455:	48 81 ee 88 40 40 00 	sub    $0x404088,%rsi
  40145c:	48 89 f0             	mov    %rsi,%rax
  40145f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401463:	48 c1 f8 03          	sar    $0x3,%rax
  401467:	48 01 c6             	add    %rax,%rsi
  40146a:	48 d1 fe             	sar    %rsi
  40146d:	74 11                	je     401480 <register_tm_clones+0x30>
  40146f:	b8 00 00 00 00       	mov    $0x0,%eax
  401474:	48 85 c0             	test   %rax,%rax
  401477:	74 07                	je     401480 <register_tm_clones+0x30>
  401479:	bf 88 40 40 00       	mov    $0x404088,%edi
  40147e:	ff e0                	jmp    *%rax
  401480:	c3                   	ret    
  401481:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401488:	00 00 00 00 
  40148c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401490 <__do_global_dtors_aux>:
  401490:	f3 0f 1e fa          	endbr64 
  401494:	80 3d 0d 2c 00 00 00 	cmpb   $0x0,0x2c0d(%rip)        # 4040a8 <completed.0>
  40149b:	75 13                	jne    4014b0 <__do_global_dtors_aux+0x20>
  40149d:	55                   	push   %rbp
  40149e:	48 89 e5             	mov    %rsp,%rbp
  4014a1:	e8 7a ff ff ff       	call   401420 <deregister_tm_clones>
  4014a6:	c6 05 fb 2b 00 00 01 	movb   $0x1,0x2bfb(%rip)        # 4040a8 <completed.0>
  4014ad:	5d                   	pop    %rbp
  4014ae:	c3                   	ret    
  4014af:	90                   	nop
  4014b0:	c3                   	ret    
  4014b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4014b8:	00 00 00 00 
  4014bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004014c0 <frame_dummy>:
  4014c0:	f3 0f 1e fa          	endbr64 
  4014c4:	eb 8a                	jmp    401450 <register_tm_clones>
  4014c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4014cd:	00 00 00 

00000000004014d0 <LoadPiano>:

void LoadPiano(Mix_Chunk **Notes) {
  4014d0:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4014d1:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPiano(Mix_Chunk **Notes) {
  4014d6:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4014d9:	bf 13 20 40 00       	mov    $0x402013,%edi
  4014de:	e8 7d fb ff ff       	call   401060 <SDL_RWFromFile@plt>
  4014e3:	be 01 00 00 00       	mov    $0x1,%esi
  4014e8:	48 89 c7             	mov    %rax,%rdi
  4014eb:	e8 00 fc ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  4014f0:	be 10 20 40 00       	mov    $0x402010,%esi
  4014f5:	bf 22 20 40 00       	mov    $0x402022,%edi
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4014fa:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  4014fd:	e8 5e fb ff ff       	call   401060 <SDL_RWFromFile@plt>
  401502:	be 01 00 00 00       	mov    $0x1,%esi
  401507:	48 89 c7             	mov    %rax,%rdi
  40150a:	e8 e1 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40150f:	be 10 20 40 00       	mov    $0x402010,%esi
  401514:	bf 31 20 40 00       	mov    $0x402031,%edi
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  401519:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40151d:	e8 3e fb ff ff       	call   401060 <SDL_RWFromFile@plt>
  401522:	be 01 00 00 00       	mov    $0x1,%esi
  401527:	48 89 c7             	mov    %rax,%rdi
  40152a:	e8 c1 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40152f:	be 10 20 40 00       	mov    $0x402010,%esi
  401534:	bf 40 20 40 00       	mov    $0x402040,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  401539:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40153d:	e8 1e fb ff ff       	call   401060 <SDL_RWFromFile@plt>
  401542:	be 01 00 00 00       	mov    $0x1,%esi
  401547:	48 89 c7             	mov    %rax,%rdi
  40154a:	e8 a1 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  40154f:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401553:	5b                   	pop    %rbx
  401554:	c3                   	ret    
  401555:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40155c:	00 00 00 00 

0000000000401560 <LoadPianoStretched>:

void LoadPianoStretched(Mix_Chunk **Notes) {
  401560:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401561:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPianoStretched(Mix_Chunk **Notes) {
  401566:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401569:	bf 4f 20 40 00       	mov    $0x40204f,%edi
  40156e:	e8 ed fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  401573:	be 01 00 00 00       	mov    $0x1,%esi
  401578:	48 89 c7             	mov    %rax,%rdi
  40157b:	e8 70 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  401580:	be 10 20 40 00       	mov    $0x402010,%esi
  401585:	bf 68 20 40 00       	mov    $0x402068,%edi
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  40158a:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  40158d:	e8 ce fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  401592:	be 01 00 00 00       	mov    $0x1,%esi
  401597:	48 89 c7             	mov    %rax,%rdi
  40159a:	e8 51 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  40159f:	be 10 20 40 00       	mov    $0x402010,%esi
  4015a4:	bf 81 20 40 00       	mov    $0x402081,%edi
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  4015a9:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4015ad:	e8 ae fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  4015b2:	be 01 00 00 00       	mov    $0x1,%esi
  4015b7:	48 89 c7             	mov    %rax,%rdi
  4015ba:	e8 31 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4015bf:	be 10 20 40 00       	mov    $0x402010,%esi
  4015c4:	bf 9a 20 40 00       	mov    $0x40209a,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4015c9:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4015cd:	e8 8e fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  4015d2:	be 01 00 00 00       	mov    $0x1,%esi
  4015d7:	48 89 c7             	mov    %rax,%rdi
  4015da:	e8 11 fb ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  4015df:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  4015e3:	5b                   	pop    %rbx
  4015e4:	c3                   	ret    

Desmontagem da secção .fini:

00000000004015e8 <_fini>:
  4015e8:	f3 0f 1e fa          	endbr64 
  4015ec:	48 83 ec 08          	sub    $0x8,%rsp
  4015f0:	48 83 c4 08          	add    $0x8,%rsp
  4015f4:	c3                   	ret    
