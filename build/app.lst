
build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000198  00000000004003e8  00000000004003e8  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000119  0000000000400580  0000000000400580  00000580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000022  000000000040069a  000000000040069a  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000030  00000000004006c0  00000000004006c0  000006c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000048  00000000004006f0  00000000004006f0  000006f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000138  0000000000400738  0000000000400738  00000738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000401000  0000000000401000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000000e0  0000000000401020  0000000000401020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000605  0000000000401100  0000000000401100  00001100  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  0000000000401708  0000000000401708  00001708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000010f  0000000000402000  0000000000402000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000003c  0000000000402110  0000000000402110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000d4  0000000000402150  0000000000402150  00002150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000403db0  0000000000403db0  00002db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000403db8  0000000000403db8  00002db8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000230  0000000000403dc0  0000000000403dc0  00002dc0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000010  0000000000403ff0  0000000000403ff0  00002ff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt      00000080  0000000000404000  0000000000404000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000004  0000000000404080  0000000000404080  00003080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000010  00000000004040a0  00000000004040a0  00003084  2**5
                  ALLOC
 25 .comment      0000002e  0000000000000000  0000000000000000  00003084  2**0
                  CONTENTS, READONLY
 26 .gnu.build.attributes 00001d1c  00000000004060b0  00000000004060b0  000030b4  2**2
                  CONTENTS, READONLY, OCTETS
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   000011f4  0000000000000000  0000000000000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 00000273  0000000000000000  0000000000000000  00006004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   00000355  0000000000000000  0000000000000000  00006277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    000004da  0000000000000000  0000000000000000  000065cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000152  0000000000000000  0000000000000000  00006aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 000000e7  0000000000000000  0000000000000000  00006bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 00000063  0000000000000000  0000000000000000  00006cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e9 2f 00 00 	mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__@Base>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	call   *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000401020 <printf@plt-0x10>:
  401020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <printf@plt>:
  401030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 404018 <printf@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	push   $0x0
  40103b:	e9 e0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401040 <Mix_PlayChannelTimed@plt>:
  401040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 404020 <Mix_PlayChannelTimed@Base>
  401046:	68 01 00 00 00       	push   $0x1
  40104b:	e9 d0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401050 <write@plt>:
  401050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 404028 <write@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	push   $0x2
  40105b:	e9 c0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401060 <SDL_RWFromFile@plt>:
  401060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 404030 <SDL_RWFromFile@Base>
  401066:	68 03 00 00 00       	push   $0x3
  40106b:	e9 b0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401070 <Mix_OpenAudio@plt>:
  401070:	ff 25 c2 2f 00 00    	jmp    *0x2fc2(%rip)        # 404038 <Mix_OpenAudio@Base>
  401076:	68 04 00 00 00       	push   $0x4
  40107b:	e9 a0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401080 <open@plt>:
  401080:	ff 25 ba 2f 00 00    	jmp    *0x2fba(%rip)        # 404040 <open@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	push   $0x5
  40108b:	e9 90 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401090 <sleep@plt>:
  401090:	ff 25 b2 2f 00 00    	jmp    *0x2fb2(%rip)        # 404048 <sleep@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	push   $0x6
  40109b:	e9 80 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010a0 <Mix_Init@plt>:
  4010a0:	ff 25 aa 2f 00 00    	jmp    *0x2faa(%rip)        # 404050 <Mix_Init@Base>
  4010a6:	68 07 00 00 00       	push   $0x7
  4010ab:	e9 70 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010b0 <ioctl@plt>:
  4010b0:	ff 25 a2 2f 00 00    	jmp    *0x2fa2(%rip)        # 404058 <ioctl@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	push   $0x8
  4010bb:	e9 60 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010c0 <fprintf@plt>:
  4010c0:	ff 25 9a 2f 00 00    	jmp    *0x2f9a(%rip)        # 404060 <fprintf@GLIBC_2.2.5>
  4010c6:	68 09 00 00 00       	push   $0x9
  4010cb:	e9 50 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010d0 <read@plt>:
  4010d0:	ff 25 92 2f 00 00    	jmp    *0x2f92(%rip)        # 404068 <read@GLIBC_2.2.5>
  4010d6:	68 0a 00 00 00       	push   $0xa
  4010db:	e9 40 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010e0 <puts@plt>:
  4010e0:	ff 25 8a 2f 00 00    	jmp    *0x2f8a(%rip)        # 404070 <puts@GLIBC_2.2.5>
  4010e6:	68 0b 00 00 00       	push   $0xb
  4010eb:	e9 30 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010f0 <Mix_LoadWAV_RW@plt>:
  4010f0:	ff 25 82 2f 00 00    	jmp    *0x2f82(%rip)        # 404078 <Mix_LoadWAV_RW@Base>
  4010f6:	68 0c 00 00 00       	push   $0xc
  4010fb:	e9 20 ff ff ff       	jmp    401020 <_init+0x20>

Desmontagem da secção .text:

0000000000401100 <main>:

void LoadPiano(Mix_Chunk **Notes);
void LoadPianoStretched(Mix_Chunk **Notes);

int main(int argc, char** argv)
{
  401100:	55                   	push   %rbp
  401101:	48 89 f5             	mov    %rsi,%rbp
  401104:	53                   	push   %rbx
  401105:	89 fb                	mov    %edi,%ebx
    const uint32_t hex_c = 0xFFFFFF46, hex_a = 0xFFFFFF08, hex_g = 0xFFFFFF42, hex_f = 0xFFFFFF0E;

	// Quando apertar a nota, mostrar no display a nota em inglês


    	Mix_Init(MIX_INIT_MID);
  401107:	bf 20 00 00 00       	mov    $0x20,%edi
{
  40110c:	48 83 ec 68          	sub    $0x68,%rsp
    	Mix_Init(MIX_INIT_MID);
  401110:	e8 8b ff ff ff       	call   4010a0 <Mix_Init@plt>
	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);
  401115:	b9 00 08 00 00       	mov    $0x800,%ecx
  40111a:	ba 02 00 00 00       	mov    $0x2,%edx
  40111f:	be 10 80 00 00       	mov    $0x8010,%esi
  401124:	bf 44 ac 00 00       	mov    $0xac44,%edi
  401129:	e8 42 ff ff ff       	call   401070 <Mix_OpenAudio@plt>
	Mix_Chunk *Notes[NotesNUM];
	Mix_Chunk *NotesStretched[NotesNUM];

	LoadPiano(Notes);
  40112e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  401133:	e8 b8 04 00 00       	call   4015f0 <LoadPiano>
	LoadPianoStretched(NotesStretched);
  401138:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  40113d:	e8 3e 05 00 00       	call   401680 <LoadPianoStretched>

	//while(1) {
		//Mix_PlayChannel(2, Notes[3], 0);
	//}

	if (argc < 2) {
  401142:	83 fb 01             	cmp    $0x1,%ebx
  401145:	0f 8e 7b 03 00 00    	jle    4014c6 <main+0x3c6>
		printf("Syntax: %s <device file path>\n", argv[0]);
		return -EINVAL;
	}

	if ((fd = open(argv[1], O_RDWR)) < 0) {
  40114b:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  40114f:	be 02 00 00 00       	mov    $0x2,%esi
  401154:	31 c0                	xor    %eax,%eax
  401156:	e8 25 ff ff ff       	call   401080 <open@plt>
  40115b:	89 c3                	mov    %eax,%ebx
  40115d:	85 c0                	test   %eax,%eax
  40115f:	79 57                	jns    4011b8 <main+0xb8>
  401161:	e9 7c 03 00 00       	jmp    4014e2 <main+0x3e2>
  401166:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40116d:	00 00 00 
        unsigned int data_switch = 0;
		ioctl(fd, RD_SWITCHES);
	    read(fd, &data_switch, 1);
		if(data_switch > 0){
            unsigned int data_push = 0;
            ioctl(fd, RD_PBUTTONS);
  401170:	e8 3b ff ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  401175:	ba 01 00 00 00       	mov    $0x1,%edx
  40117a:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  40117f:	89 df                	mov    %ebx,%edi
  401181:	e8 4a ff ff ff       	call   4010d0 <read@plt>
	        
			// Notas normais
			if(data_push == 14){
  401186:	8b 44 24 18          	mov    0x18(%rsp),%eax
  40118a:	83 f8 0e             	cmp    $0xe,%eax
  40118d:	0f 84 fd 01 00 00    	je     401390 <main+0x290>
	                ioctl(fd, WR_R_DISPLAY);
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
					// Printar F no D7

			}
			if(data_push == 13){
  401193:	83 f8 0d             	cmp    $0xd,%eax
  401196:	0f 84 a4 01 00 00    	je     401340 <main+0x240>
                unsigned int data_display_direita = 0xFFFFFF86;
	                ioctl(fd, WR_R_DISPLAY);
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
					// Printar E no D7
			}
		if(data_push == 11){
  40119c:	83 f8 0b             	cmp    $0xb,%eax
  40119f:	0f 84 4b 01 00 00    	je     4012f0 <main+0x1f0>
                unsigned int data_display_direita = 0xFFFFFFA1;
	            ioctl(fd, WR_R_DISPLAY);
	            retval = write(fd, &data_display_direita, sizeof(data_display_direita));
					// Printar D no D7
			}
			if(data_push == 7){
  4011a5:	83 f8 07             	cmp    $0x7,%eax
  4011a8:	0f 84 22 01 00 00    	je     4012d0 <main+0x1d0>
	                ioctl(fd, WR_R_DISPLAY);
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
					// Printar C no D7
				}
			}
        	sleep(1);
  4011ae:	bf 01 00 00 00       	mov    $0x1,%edi
  4011b3:	e8 d8 fe ff ff       	call   401090 <sleep@plt>
	    ioctl(fd, WR_GREEN_LEDS);
  4011b8:	be 66 61 00 00       	mov    $0x6166,%esi
  4011bd:	89 df                	mov    %ebx,%edi
  4011bf:	31 c0                	xor    %eax,%eax
        unsigned int data_green_led = 0xFFFFFFFF;
  4011c1:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4011c8:	ff 
	    ioctl(fd, WR_GREEN_LEDS);
  4011c9:	e8 e2 fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_green_led, sizeof(data_green_led));
  4011ce:	ba 04 00 00 00       	mov    $0x4,%edx
  4011d3:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4011d8:	89 df                	mov    %ebx,%edi
  4011da:	e8 71 fe ff ff       	call   401050 <write@plt>
	    ioctl(fd, WR_L_DISPLAY);
  4011df:	be 63 61 00 00       	mov    $0x6163,%esi
  4011e4:	89 df                	mov    %ebx,%edi
  4011e6:	31 c0                	xor    %eax,%eax
	    unsigned int data_display_esquerda = 0xFFFFFFFF;
  4011e8:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%rsp)
  4011ef:	ff 
	    ioctl(fd, WR_L_DISPLAY);
  4011f0:	e8 bb fe ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_esquerda, sizeof(data_display_esquerda));
  4011f5:	ba 04 00 00 00       	mov    $0x4,%edx
  4011fa:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4011ff:	89 df                	mov    %ebx,%edi
  401201:	e8 4a fe ff ff       	call   401050 <write@plt>
		ioctl(fd, RD_SWITCHES);
  401206:	be 61 61 00 00       	mov    $0x6161,%esi
  40120b:	89 df                	mov    %ebx,%edi
  40120d:	31 c0                	xor    %eax,%eax
        unsigned int data_switch = 0;
  40120f:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
  401216:	00 
		ioctl(fd, RD_SWITCHES);
  401217:	e8 94 fe ff ff       	call   4010b0 <ioctl@plt>
	    read(fd, &data_switch, 1);
  40121c:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
  401221:	89 df                	mov    %ebx,%edi
  401223:	ba 01 00 00 00       	mov    $0x1,%edx
  401228:	e8 a3 fe ff ff       	call   4010d0 <read@plt>
		if(data_switch > 0){
  40122d:	8b 44 24 14          	mov    0x14(%rsp),%eax
            ioctl(fd, RD_PBUTTONS);
  401231:	be 62 61 00 00       	mov    $0x6162,%esi
  401236:	89 df                	mov    %ebx,%edi
            unsigned int data_push = 0;
  401238:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  40123f:	00 
		if(data_switch > 0){
  401240:	85 c0                	test   %eax,%eax
            ioctl(fd, RD_PBUTTONS);
  401242:	b8 00 00 00 00       	mov    $0x0,%eax
		if(data_switch > 0){
  401247:	0f 85 23 ff ff ff    	jne    401170 <main+0x70>
            ioctl(fd, RD_PBUTTONS);
  40124d:	e8 5e fe ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  401252:	ba 01 00 00 00       	mov    $0x1,%edx
  401257:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  40125c:	89 df                	mov    %ebx,%edi
  40125e:	e8 6d fe ff ff       	call   4010d0 <read@plt>
				if(data_push == 14){
  401263:	8b 44 24 18          	mov    0x18(%rsp),%eax
  401267:	83 f8 0e             	cmp    $0xe,%eax
  40126a:	0f 84 10 02 00 00    	je     401480 <main+0x380>
				if(data_push == 13){
  401270:	83 f8 0d             	cmp    $0xd,%eax
  401273:	0f 84 b7 01 00 00    	je     401430 <main+0x330>
				if(data_push == 11){
  401279:	83 f8 0b             	cmp    $0xb,%eax
  40127c:	0f 84 5e 01 00 00    	je     4013e0 <main+0x2e0>
				if(data_push == 7){
  401282:	83 f8 07             	cmp    $0x7,%eax
  401285:	0f 85 23 ff ff ff    	jne    4011ae <main+0xae>
					Mix_PlayChannel(2, NotesStretched[0], 0);
  40128b:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  401290:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401295:	31 d2                	xor    %edx,%edx
  401297:	bf 02 00 00 00       	mov    $0x2,%edi
  40129c:	e8 9f fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4012a1:	89 df                	mov    %ebx,%edi
  4012a3:	be 64 61 00 00       	mov    $0x6164,%esi
  4012a8:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFC6;
  4012aa:	c7 44 24 1c c6 ff ff 	movl   $0xffffffc6,0x1c(%rsp)
  4012b1:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4012b2:	e8 f9 fd ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4012b7:	ba 04 00 00 00       	mov    $0x4,%edx
  4012bc:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  4012c1:	89 df                	mov    %ebx,%edi
  4012c3:	e8 88 fd ff ff       	call   401050 <write@plt>
  4012c8:	e9 e1 fe ff ff       	jmp    4011ae <main+0xae>
  4012cd:	0f 1f 00             	nopl   (%rax)
				printf("botao 1\n");
  4012d0:	bf e2 20 40 00       	mov    $0x4020e2,%edi
  4012d5:	e8 06 fe ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[0], 0);
  4012da:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4012df:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4012e4:	31 d2                	xor    %edx,%edx
  4012e6:	eb af                	jmp    401297 <main+0x197>
  4012e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4012ef:	00 
				printf("botao 2\n");
  4012f0:	bf da 20 40 00       	mov    $0x4020da,%edi
  4012f5:	e8 e6 fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[1], 0);
  4012fa:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  4012ff:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401304:	31 d2                	xor    %edx,%edx
  401306:	bf 02 00 00 00       	mov    $0x2,%edi
  40130b:	e8 30 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	            ioctl(fd, WR_R_DISPLAY);
  401310:	be 64 61 00 00       	mov    $0x6164,%esi
  401315:	89 df                	mov    %ebx,%edi
  401317:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFFA1;
  401319:	c7 44 24 1c a1 ff ff 	movl   $0xffffffa1,0x1c(%rsp)
  401320:	ff 
	            ioctl(fd, WR_R_DISPLAY);
  401321:	e8 8a fd ff ff       	call   4010b0 <ioctl@plt>
	            retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  401326:	ba 04 00 00 00       	mov    $0x4,%edx
  40132b:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  401330:	89 df                	mov    %ebx,%edi
  401332:	e8 19 fd ff ff       	call   401050 <write@plt>
			if(data_push == 7){
  401337:	8b 44 24 18          	mov    0x18(%rsp),%eax
  40133b:	e9 65 fe ff ff       	jmp    4011a5 <main+0xa5>
				printf("botao 3\n");
  401340:	bf d2 20 40 00       	mov    $0x4020d2,%edi
  401345:	e8 96 fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[2], 0);
  40134a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  40134f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401354:	31 d2                	xor    %edx,%edx
  401356:	bf 02 00 00 00       	mov    $0x2,%edi
  40135b:	e8 e0 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401360:	be 64 61 00 00       	mov    $0x6164,%esi
  401365:	89 df                	mov    %ebx,%edi
  401367:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFF86;
  401369:	c7 44 24 1c 86 ff ff 	movl   $0xffffff86,0x1c(%rsp)
  401370:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401371:	e8 3a fd ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  401376:	ba 04 00 00 00       	mov    $0x4,%edx
  40137b:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  401380:	89 df                	mov    %ebx,%edi
  401382:	e8 c9 fc ff ff       	call   401050 <write@plt>
		if(data_push == 11){
  401387:	8b 44 24 18          	mov    0x18(%rsp),%eax
  40138b:	e9 0c fe ff ff       	jmp    40119c <main+0x9c>
				printf("botao 4\n");
  401390:	bf ca 20 40 00       	mov    $0x4020ca,%edi
  401395:	e8 46 fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[3], 0);
  40139a:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40139f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4013a4:	31 d2                	xor    %edx,%edx
  4013a6:	bf 02 00 00 00       	mov    $0x2,%edi
  4013ab:	e8 90 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4013b0:	be 64 61 00 00       	mov    $0x6164,%esi
  4013b5:	89 df                	mov    %ebx,%edi
  4013b7:	31 c0                	xor    %eax,%eax
               unsigned int data_display_direita = 0xFFFFFF8E;
  4013b9:	c7 44 24 1c 8e ff ff 	movl   $0xffffff8e,0x1c(%rsp)
  4013c0:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4013c1:	e8 ea fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4013c6:	ba 04 00 00 00       	mov    $0x4,%edx
  4013cb:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  4013d0:	89 df                	mov    %ebx,%edi
  4013d2:	e8 79 fc ff ff       	call   401050 <write@plt>
			if(data_push == 13){
  4013d7:	8b 44 24 18          	mov    0x18(%rsp),%eax
  4013db:	e9 b3 fd ff ff       	jmp    401193 <main+0x93>
					Mix_PlayChannel(2, NotesStretched[1], 0);
  4013e0:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  4013e5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4013ea:	31 d2                	xor    %edx,%edx
  4013ec:	bf 02 00 00 00       	mov    $0x2,%edi
  4013f1:	e8 4a fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4013f6:	be 64 61 00 00       	mov    $0x6164,%esi
  4013fb:	89 df                	mov    %ebx,%edi
  4013fd:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFA1;
  4013ff:	c7 44 24 1c a1 ff ff 	movl   $0xffffffa1,0x1c(%rsp)
  401406:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401407:	e8 a4 fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40140c:	ba 04 00 00 00       	mov    $0x4,%edx
  401411:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  401416:	89 df                	mov    %ebx,%edi
  401418:	e8 33 fc ff ff       	call   401050 <write@plt>
				if(data_push == 7){
  40141d:	8b 44 24 18          	mov    0x18(%rsp),%eax
  401421:	e9 5c fe ff ff       	jmp    401282 <main+0x182>
  401426:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40142d:	00 00 00 
					Mix_PlayChannel(2, NotesStretched[2], 0);
  401430:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  401435:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40143a:	31 d2                	xor    %edx,%edx
  40143c:	bf 02 00 00 00       	mov    $0x2,%edi
  401441:	e8 fa fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401446:	be 64 61 00 00       	mov    $0x6164,%esi
  40144b:	89 df                	mov    %ebx,%edi
  40144d:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF86;
  40144f:	c7 44 24 1c 86 ff ff 	movl   $0xffffff86,0x1c(%rsp)
  401456:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401457:	e8 54 fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40145c:	ba 04 00 00 00       	mov    $0x4,%edx
  401461:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  401466:	89 df                	mov    %ebx,%edi
  401468:	e8 e3 fb ff ff       	call   401050 <write@plt>
				if(data_push == 11){
  40146d:	8b 44 24 18          	mov    0x18(%rsp),%eax
  401471:	e9 03 fe ff ff       	jmp    401279 <main+0x179>
  401476:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40147d:	00 00 00 
					Mix_PlayChannel(2, NotesStretched[3], 0);
  401480:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  401485:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40148a:	31 d2                	xor    %edx,%edx
  40148c:	bf 02 00 00 00       	mov    $0x2,%edi
  401491:	e8 aa fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401496:	be 64 61 00 00       	mov    $0x6164,%esi
  40149b:	89 df                	mov    %ebx,%edi
  40149d:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF8E;
  40149f:	c7 44 24 1c 8e ff ff 	movl   $0xffffff8e,0x1c(%rsp)
  4014a6:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4014a7:	e8 04 fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4014ac:	ba 04 00 00 00       	mov    $0x4,%edx
  4014b1:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  4014b6:	89 df                	mov    %ebx,%edi
  4014b8:	e8 93 fb ff ff       	call   401050 <write@plt>
				if(data_push == 13){
  4014bd:	8b 44 24 18          	mov    0x18(%rsp),%eax
  4014c1:	e9 aa fd ff ff       	jmp    401270 <main+0x170>
		printf("Syntax: %s <device file path>\n", argv[0]);
  4014c6:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  4014ca:	bf f0 20 40 00       	mov    $0x4020f0,%edi
  4014cf:	31 c0                	xor    %eax,%eax
  4014d1:	e8 5a fb ff ff       	call   401030 <printf@plt>
		return -EINVAL;
  4014d6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}

	close(fd);

	return 0;
}
  4014db:	48 83 c4 68          	add    $0x68,%rsp
  4014df:	5b                   	pop    %rbx
  4014e0:	5d                   	pop    %rbp
  4014e1:	c3                   	ret    
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  4014e2:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  4014e6:	48 8b 3d b3 2b 00 00 	mov    0x2bb3(%rip),%rdi        # 4040a0 <stderr@@GLIBC_2.2.5>
  4014ed:	be b3 20 40 00       	mov    $0x4020b3,%esi
  4014f2:	31 c0                	xor    %eax,%eax
  4014f4:	e8 c7 fb ff ff       	call   4010c0 <fprintf@plt>
		return -EBUSY;
  4014f9:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  4014fe:	eb db                	jmp    4014db <main+0x3db>

0000000000401500 <_start>:
  401500:	f3 0f 1e fa          	endbr64 
  401504:	31 ed                	xor    %ebp,%ebp
  401506:	49 89 d1             	mov    %rdx,%r9
  401509:	5e                   	pop    %rsi
  40150a:	48 89 e2             	mov    %rsp,%rdx
  40150d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401511:	50                   	push   %rax
  401512:	54                   	push   %rsp
  401513:	45 31 c0             	xor    %r8d,%r8d
  401516:	31 c9                	xor    %ecx,%ecx
  401518:	48 c7 c7 00 11 40 00 	mov    $0x401100,%rdi
  40151f:	ff 15 cb 2a 00 00    	call   *0x2acb(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.34>
  401525:	f4                   	hlt    

0000000000401526 <.annobin_abi_note.c>:
  401526:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40152d:	00 00 00 

0000000000401530 <_dl_relocate_static_pie>:
  401530:	f3 0f 1e fa          	endbr64 
  401534:	c3                   	ret    

0000000000401535 <.annobin__dl_relocate_static_pie.end>:
  401535:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40153c:	00 00 00 
  40153f:	90                   	nop

0000000000401540 <deregister_tm_clones>:
  401540:	b8 88 40 40 00       	mov    $0x404088,%eax
  401545:	48 3d 88 40 40 00    	cmp    $0x404088,%rax
  40154b:	74 13                	je     401560 <deregister_tm_clones+0x20>
  40154d:	b8 00 00 00 00       	mov    $0x0,%eax
  401552:	48 85 c0             	test   %rax,%rax
  401555:	74 09                	je     401560 <deregister_tm_clones+0x20>
  401557:	bf 88 40 40 00       	mov    $0x404088,%edi
  40155c:	ff e0                	jmp    *%rax
  40155e:	66 90                	xchg   %ax,%ax
  401560:	c3                   	ret    
  401561:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401568:	00 00 00 00 
  40156c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401570 <register_tm_clones>:
  401570:	be 88 40 40 00       	mov    $0x404088,%esi
  401575:	48 81 ee 88 40 40 00 	sub    $0x404088,%rsi
  40157c:	48 89 f0             	mov    %rsi,%rax
  40157f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401583:	48 c1 f8 03          	sar    $0x3,%rax
  401587:	48 01 c6             	add    %rax,%rsi
  40158a:	48 d1 fe             	sar    %rsi
  40158d:	74 11                	je     4015a0 <register_tm_clones+0x30>
  40158f:	b8 00 00 00 00       	mov    $0x0,%eax
  401594:	48 85 c0             	test   %rax,%rax
  401597:	74 07                	je     4015a0 <register_tm_clones+0x30>
  401599:	bf 88 40 40 00       	mov    $0x404088,%edi
  40159e:	ff e0                	jmp    *%rax
  4015a0:	c3                   	ret    
  4015a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4015a8:	00 00 00 00 
  4015ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004015b0 <__do_global_dtors_aux>:
  4015b0:	f3 0f 1e fa          	endbr64 
  4015b4:	80 3d ed 2a 00 00 00 	cmpb   $0x0,0x2aed(%rip)        # 4040a8 <completed.0>
  4015bb:	75 13                	jne    4015d0 <__do_global_dtors_aux+0x20>
  4015bd:	55                   	push   %rbp
  4015be:	48 89 e5             	mov    %rsp,%rbp
  4015c1:	e8 7a ff ff ff       	call   401540 <deregister_tm_clones>
  4015c6:	c6 05 db 2a 00 00 01 	movb   $0x1,0x2adb(%rip)        # 4040a8 <completed.0>
  4015cd:	5d                   	pop    %rbp
  4015ce:	c3                   	ret    
  4015cf:	90                   	nop
  4015d0:	c3                   	ret    
  4015d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4015d8:	00 00 00 00 
  4015dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004015e0 <frame_dummy>:
  4015e0:	f3 0f 1e fa          	endbr64 
  4015e4:	eb 8a                	jmp    401570 <register_tm_clones>
  4015e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4015ed:	00 00 00 

00000000004015f0 <LoadPiano>:

void LoadPiano(Mix_Chunk **Notes) {
  4015f0:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4015f1:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPiano(Mix_Chunk **Notes) {
  4015f6:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4015f9:	bf 13 20 40 00       	mov    $0x402013,%edi
  4015fe:	e8 5d fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  401603:	be 01 00 00 00       	mov    $0x1,%esi
  401608:	48 89 c7             	mov    %rax,%rdi
  40160b:	e8 e0 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  401610:	be 10 20 40 00       	mov    $0x402010,%esi
  401615:	bf 22 20 40 00       	mov    $0x402022,%edi
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  40161a:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  40161d:	e8 3e fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  401622:	be 01 00 00 00       	mov    $0x1,%esi
  401627:	48 89 c7             	mov    %rax,%rdi
  40162a:	e8 c1 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40162f:	be 10 20 40 00       	mov    $0x402010,%esi
  401634:	bf 31 20 40 00       	mov    $0x402031,%edi
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  401639:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40163d:	e8 1e fa ff ff       	call   401060 <SDL_RWFromFile@plt>
  401642:	be 01 00 00 00       	mov    $0x1,%esi
  401647:	48 89 c7             	mov    %rax,%rdi
  40164a:	e8 a1 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40164f:	be 10 20 40 00       	mov    $0x402010,%esi
  401654:	bf 40 20 40 00       	mov    $0x402040,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  401659:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40165d:	e8 fe f9 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401662:	be 01 00 00 00       	mov    $0x1,%esi
  401667:	48 89 c7             	mov    %rax,%rdi
  40166a:	e8 81 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  40166f:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401673:	5b                   	pop    %rbx
  401674:	c3                   	ret    
  401675:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40167c:	00 00 00 00 

0000000000401680 <LoadPianoStretched>:

void LoadPianoStretched(Mix_Chunk **Notes) {
  401680:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401681:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPianoStretched(Mix_Chunk **Notes) {
  401686:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401689:	bf 4f 20 40 00       	mov    $0x40204f,%edi
  40168e:	e8 cd f9 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401693:	be 01 00 00 00       	mov    $0x1,%esi
  401698:	48 89 c7             	mov    %rax,%rdi
  40169b:	e8 50 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  4016a0:	be 10 20 40 00       	mov    $0x402010,%esi
  4016a5:	bf 68 20 40 00       	mov    $0x402068,%edi
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  4016aa:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  4016ad:	e8 ae f9 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4016b2:	be 01 00 00 00       	mov    $0x1,%esi
  4016b7:	48 89 c7             	mov    %rax,%rdi
  4016ba:	e8 31 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4016bf:	be 10 20 40 00       	mov    $0x402010,%esi
  4016c4:	bf 81 20 40 00       	mov    $0x402081,%edi
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  4016c9:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4016cd:	e8 8e f9 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4016d2:	be 01 00 00 00       	mov    $0x1,%esi
  4016d7:	48 89 c7             	mov    %rax,%rdi
  4016da:	e8 11 fa ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4016df:	be 10 20 40 00       	mov    $0x402010,%esi
  4016e4:	bf 9a 20 40 00       	mov    $0x40209a,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4016e9:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4016ed:	e8 6e f9 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4016f2:	be 01 00 00 00       	mov    $0x1,%esi
  4016f7:	48 89 c7             	mov    %rax,%rdi
  4016fa:	e8 f1 f9 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  4016ff:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401703:	5b                   	pop    %rbx
  401704:	c3                   	ret    

Desmontagem da secção .fini:

0000000000401708 <_fini>:
  401708:	f3 0f 1e fa          	endbr64 
  40170c:	48 83 ec 08          	sub    $0x8,%rsp
  401710:	48 83 c4 08          	add    $0x8,%rsp
  401714:	c3                   	ret    
