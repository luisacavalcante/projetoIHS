
build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000198  00000000004003e8  00000000004003e8  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000119  0000000000400580  0000000000400580  00000580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000022  000000000040069a  000000000040069a  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000030  00000000004006c0  00000000004006c0  000006c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000048  00000000004006f0  00000000004006f0  000006f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000138  0000000000400738  0000000000400738  00000738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000401000  0000000000401000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000000e0  0000000000401020  0000000000401020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000795  0000000000401100  0000000000401100  00001100  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  0000000000401898  0000000000401898  00001898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000010f  0000000000402000  0000000000402000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000003c  0000000000402110  0000000000402110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000d4  0000000000402150  0000000000402150  00002150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000403db0  0000000000403db0  00002db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000403db8  0000000000403db8  00002db8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000230  0000000000403dc0  0000000000403dc0  00002dc0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000010  0000000000403ff0  0000000000403ff0  00002ff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt      00000080  0000000000404000  0000000000404000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000004  0000000000404080  0000000000404080  00003080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000010  00000000004040a0  00000000004040a0  00003084  2**5
                  ALLOC
 25 .comment      0000002e  0000000000000000  0000000000000000  00003084  2**0
                  CONTENTS, READONLY
 26 .gnu.build.attributes 00001d1c  00000000004060b0  00000000004060b0  000030b4  2**2
                  CONTENTS, READONLY, OCTETS
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   00001537  0000000000000000  0000000000000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 00000273  0000000000000000  0000000000000000  00006347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   00000410  0000000000000000  0000000000000000  000065ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    000004e7  0000000000000000  0000000000000000  000069ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000152  0000000000000000  0000000000000000  00006eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 000000e7  0000000000000000  0000000000000000  00007003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 00000063  0000000000000000  0000000000000000  000070ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e9 2f 00 00 	mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__@Base>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	call   *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000401020 <printf@plt-0x10>:
  401020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <printf@plt>:
  401030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 404018 <printf@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	push   $0x0
  40103b:	e9 e0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401040 <Mix_PlayChannelTimed@plt>:
  401040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 404020 <Mix_PlayChannelTimed@Base>
  401046:	68 01 00 00 00       	push   $0x1
  40104b:	e9 d0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401050 <write@plt>:
  401050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 404028 <write@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	push   $0x2
  40105b:	e9 c0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401060 <SDL_RWFromFile@plt>:
  401060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 404030 <SDL_RWFromFile@Base>
  401066:	68 03 00 00 00       	push   $0x3
  40106b:	e9 b0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401070 <Mix_OpenAudio@plt>:
  401070:	ff 25 c2 2f 00 00    	jmp    *0x2fc2(%rip)        # 404038 <Mix_OpenAudio@Base>
  401076:	68 04 00 00 00       	push   $0x4
  40107b:	e9 a0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401080 <open@plt>:
  401080:	ff 25 ba 2f 00 00    	jmp    *0x2fba(%rip)        # 404040 <open@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	push   $0x5
  40108b:	e9 90 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401090 <sleep@plt>:
  401090:	ff 25 b2 2f 00 00    	jmp    *0x2fb2(%rip)        # 404048 <sleep@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	push   $0x6
  40109b:	e9 80 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010a0 <Mix_Init@plt>:
  4010a0:	ff 25 aa 2f 00 00    	jmp    *0x2faa(%rip)        # 404050 <Mix_Init@Base>
  4010a6:	68 07 00 00 00       	push   $0x7
  4010ab:	e9 70 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010b0 <ioctl@plt>:
  4010b0:	ff 25 a2 2f 00 00    	jmp    *0x2fa2(%rip)        # 404058 <ioctl@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	push   $0x8
  4010bb:	e9 60 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010c0 <fprintf@plt>:
  4010c0:	ff 25 9a 2f 00 00    	jmp    *0x2f9a(%rip)        # 404060 <fprintf@GLIBC_2.2.5>
  4010c6:	68 09 00 00 00       	push   $0x9
  4010cb:	e9 50 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010d0 <read@plt>:
  4010d0:	ff 25 92 2f 00 00    	jmp    *0x2f92(%rip)        # 404068 <read@GLIBC_2.2.5>
  4010d6:	68 0a 00 00 00       	push   $0xa
  4010db:	e9 40 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010e0 <puts@plt>:
  4010e0:	ff 25 8a 2f 00 00    	jmp    *0x2f8a(%rip)        # 404070 <puts@GLIBC_2.2.5>
  4010e6:	68 0b 00 00 00       	push   $0xb
  4010eb:	e9 30 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010f0 <Mix_LoadWAV_RW@plt>:
  4010f0:	ff 25 82 2f 00 00    	jmp    *0x2f82(%rip)        # 404078 <Mix_LoadWAV_RW@Base>
  4010f6:	68 0c 00 00 00       	push   $0xc
  4010fb:	e9 20 ff ff ff       	jmp    401020 <_init+0x20>

Desmontagem da secção .text:

0000000000401100 <main>:

void LoadPiano(Mix_Chunk **Notes);
void LoadPianoStretched(Mix_Chunk **Notes);

int main(int argc, char** argv)
{
  401100:	55                   	push   %rbp
  401101:	48 89 f5             	mov    %rsi,%rbp
  401104:	53                   	push   %rbx
  401105:	89 fb                	mov    %edi,%ebx
    const uint32_t hex_c = 0xFFFFFF46, hex_a = 0xFFFFFF08, hex_g = 0xFFFFFF42, hex_f = 0xFFFFFF0E;

	// Quando apertar a nota, mostrar no display a nota em inglês


    	Mix_Init(MIX_INIT_MID);
  401107:	bf 20 00 00 00       	mov    $0x20,%edi
{
  40110c:	48 83 ec 78          	sub    $0x78,%rsp
    	Mix_Init(MIX_INIT_MID);
  401110:	e8 8b ff ff ff       	call   4010a0 <Mix_Init@plt>
	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);
  401115:	b9 00 08 00 00       	mov    $0x800,%ecx
  40111a:	ba 02 00 00 00       	mov    $0x2,%edx
  40111f:	be 10 80 00 00       	mov    $0x8010,%esi
  401124:	bf 44 ac 00 00       	mov    $0xac44,%edi
  401129:	e8 42 ff ff ff       	call   401070 <Mix_OpenAudio@plt>
	Mix_Chunk *Notes[NotesNUM];
	Mix_Chunk *NotesStretched[NotesNUM];

	LoadPiano(Notes);
  40112e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  401133:	e8 48 06 00 00       	call   401780 <LoadPiano>
	LoadPianoStretched(NotesStretched);
  401138:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  40113d:	e8 ce 06 00 00       	call   401810 <LoadPianoStretched>

	//while(1) {
		//Mix_PlayChannel(2, Notes[3], 0);
	//}

	if (argc < 2) {
  401142:	83 fb 01             	cmp    $0x1,%ebx
  401145:	0f 8e 02 05 00 00    	jle    40164d <main+0x54d>
		printf("Syntax: %s <device file path>\n", argv[0]);
		return -EINVAL;
	}

	if ((fd = open(argv[1], O_RDWR)) < 0) {
  40114b:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  40114f:	be 02 00 00 00       	mov    $0x2,%esi
  401154:	31 c0                	xor    %eax,%eax
  401156:	e8 25 ff ff ff       	call   401080 <open@plt>
  40115b:	89 c3                	mov    %eax,%ebx
  40115d:	85 c0                	test   %eax,%eax
  40115f:	0f 88 04 05 00 00    	js     401669 <main+0x569>
		fprintf(stderr, "Error opening file %s\n", argv[1]);
		return -EBUSY;
	}
	unsigned int data_display_esquerda = 0xFFFFFFFF;
	    ioctl(fd, WR_L_DISPLAY);
  401165:	89 c7                	mov    %eax,%edi
  401167:	be 63 61 00 00       	mov    $0x6163,%esi
  40116c:	31 c0                	xor    %eax,%eax
	unsigned int data_display_esquerda = 0xFFFFFFFF;
  40116e:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  401175:	ff 
	    ioctl(fd, WR_L_DISPLAY);
  401176:	e8 35 ff ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_esquerda, sizeof(data_display_esquerda));
  40117b:	ba 04 00 00 00       	mov    $0x4,%edx
  401180:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  401185:	89 df                	mov    %ebx,%edi
  401187:	e8 c4 fe ff ff       	call   401050 <write@plt>

	unsigned int data_display_direita = 0xFFFFFFFF;
	    ioctl(fd, WR_R_DISPLAY);
  40118c:	89 df                	mov    %ebx,%edi
  40118e:	be 64 61 00 00       	mov    $0x6164,%esi
  401193:	31 c0                	xor    %eax,%eax
	unsigned int data_display_direita = 0xFFFFFFFF;
  401195:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%rsp)
  40119c:	ff 
	    ioctl(fd, WR_R_DISPLAY);
  40119d:	e8 0e ff ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4011a2:	ba 04 00 00 00       	mov    $0x4,%edx
  4011a7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4011ac:	89 df                	mov    %ebx,%edi
  4011ae:	e8 9d fe ff ff       	call   401050 <write@plt>
  4011b3:	eb 4b                	jmp    401200 <main+0x100>
  4011b5:	0f 1f 00             	nopl   (%rax)
        unsigned int data_switch = 0;
		ioctl(fd, RD_SWITCHES);
	    read(fd, &data_switch, 1);
		if(data_switch > 0){
            unsigned int data_push = 0;
            ioctl(fd, RD_PBUTTONS);
  4011b8:	e8 f3 fe ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  4011bd:	ba 01 00 00 00       	mov    $0x1,%edx
  4011c2:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
  4011c7:	89 df                	mov    %ebx,%edi
  4011c9:	e8 02 ff ff ff       	call   4010d0 <read@plt>
	        
			// Notas normais
			if(data_push == 14){
  4011ce:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4011d2:	83 f8 0e             	cmp    $0xe,%eax
  4011d5:	0f 84 a5 02 00 00    	je     401480 <main+0x380>
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar F no D7

			}
			if(data_push == 13){
  4011db:	83 f8 0d             	cmp    $0xd,%eax
  4011de:	0f 84 1c 02 00 00    	je     401400 <main+0x300>
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));

					// Printar E no D7
			}
		if(data_push == 11){
  4011e4:	83 f8 0b             	cmp    $0xb,%eax
  4011e7:	0f 84 93 01 00 00    	je     401380 <main+0x280>
	            unsigned int data_green_led = 48;
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar D no D7
			}
			if(data_push == 7){
  4011ed:	83 f8 07             	cmp    $0x7,%eax
  4011f0:	0f 84 72 01 00 00    	je     401368 <main+0x268>
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar C no D7
				}
			}

        	sleep(1);
  4011f6:	bf 01 00 00 00       	mov    $0x1,%edi
  4011fb:	e8 90 fe ff ff       	call   401090 <sleep@plt>
	    ioctl(fd, WR_GREEN_LEDS);
  401200:	be 66 61 00 00       	mov    $0x6166,%esi
  401205:	89 df                	mov    %ebx,%edi
  401207:	31 c0                	xor    %eax,%eax
        unsigned int data_green_led = 0;
  401209:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
  401210:	00 
	    ioctl(fd, WR_GREEN_LEDS);
  401211:	e8 9a fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_green_led, sizeof(data_green_led));
  401216:	ba 04 00 00 00       	mov    $0x4,%edx
  40121b:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
  401220:	89 df                	mov    %ebx,%edi
  401222:	e8 29 fe ff ff       	call   401050 <write@plt>
	    ioctl(fd, WR_RED_LEDS);
  401227:	be 65 61 00 00       	mov    $0x6165,%esi
  40122c:	89 df                	mov    %ebx,%edi
  40122e:	31 c0                	xor    %eax,%eax
	    unsigned int data_red_led = 131072;
  401230:	c7 44 24 18 00 00 02 	movl   $0x20000,0x18(%rsp)
  401237:	00 
	    ioctl(fd, WR_RED_LEDS);
  401238:	e8 73 fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_red_led, sizeof(data_red_led));
  40123d:	ba 04 00 00 00       	mov    $0x4,%edx
  401242:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  401247:	89 df                	mov    %ebx,%edi
  401249:	e8 02 fe ff ff       	call   401050 <write@plt>
	    ioctl(fd, WR_L_DISPLAY);
  40124e:	be 63 61 00 00       	mov    $0x6163,%esi
  401253:	89 df                	mov    %ebx,%edi
  401255:	31 c0                	xor    %eax,%eax
	    unsigned int data_display_esquerda = 0xFFFFFFFF;
  401257:	c7 44 24 1c ff ff ff 	movl   $0xffffffff,0x1c(%rsp)
  40125e:	ff 
	    ioctl(fd, WR_L_DISPLAY);
  40125f:	e8 4c fe ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_esquerda, sizeof(data_display_esquerda));
  401264:	ba 04 00 00 00       	mov    $0x4,%edx
  401269:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  40126e:	89 df                	mov    %ebx,%edi
  401270:	e8 db fd ff ff       	call   401050 <write@plt>
		ioctl(fd, RD_SWITCHES);
  401275:	be 61 61 00 00       	mov    $0x6161,%esi
  40127a:	89 df                	mov    %ebx,%edi
  40127c:	31 c0                	xor    %eax,%eax
        unsigned int data_switch = 0;
  40127e:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  401285:	00 
		ioctl(fd, RD_SWITCHES);
  401286:	e8 25 fe ff ff       	call   4010b0 <ioctl@plt>
	    read(fd, &data_switch, 1);
  40128b:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  401290:	89 df                	mov    %ebx,%edi
  401292:	ba 01 00 00 00       	mov    $0x1,%edx
  401297:	e8 34 fe ff ff       	call   4010d0 <read@plt>
		if(data_switch > 0){
  40129c:	8b 44 24 20          	mov    0x20(%rsp),%eax
            ioctl(fd, RD_PBUTTONS);
  4012a0:	be 62 61 00 00       	mov    $0x6162,%esi
  4012a5:	89 df                	mov    %ebx,%edi
            unsigned int data_push = 0;
  4012a7:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  4012ae:	00 
		if(data_switch > 0){
  4012af:	85 c0                	test   %eax,%eax
            ioctl(fd, RD_PBUTTONS);
  4012b1:	b8 00 00 00 00       	mov    $0x0,%eax
		if(data_switch > 0){
  4012b6:	0f 85 fc fe ff ff    	jne    4011b8 <main+0xb8>
            ioctl(fd, RD_PBUTTONS);
  4012bc:	e8 ef fd ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  4012c1:	ba 01 00 00 00       	mov    $0x1,%edx
  4012c6:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
  4012cb:	89 df                	mov    %ebx,%edi
  4012cd:	e8 fe fd ff ff       	call   4010d0 <read@plt>
				if(data_push == 14){
  4012d2:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4012d6:	83 f8 0e             	cmp    $0xe,%eax
  4012d9:	0f 84 01 03 00 00    	je     4015e0 <main+0x4e0>
				if(data_push == 13){
  4012df:	83 f8 0d             	cmp    $0xd,%eax
  4012e2:	0f 84 88 02 00 00    	je     401570 <main+0x470>
				if(data_push == 11){
  4012e8:	83 f8 0b             	cmp    $0xb,%eax
  4012eb:	0f 84 0f 02 00 00    	je     401500 <main+0x400>
				if(data_push == 7){
  4012f1:	83 f8 07             	cmp    $0x7,%eax
  4012f4:	0f 85 fc fe ff ff    	jne    4011f6 <main+0xf6>
					Mix_PlayChannel(2, NotesStretched[0], 0);
  4012fa:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  4012ff:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401304:	31 d2                	xor    %edx,%edx
  401306:	bf 02 00 00 00       	mov    $0x2,%edi
  40130b:	e8 30 fd ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401310:	89 df                	mov    %ebx,%edi
  401312:	be 64 61 00 00       	mov    $0x6164,%esi
  401317:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFC6;
  401319:	c7 44 24 28 c6 ff ff 	movl   $0xffffffc6,0x28(%rsp)
  401320:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401321:	e8 8a fd ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  401326:	ba 04 00 00 00       	mov    $0x4,%edx
  40132b:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401330:	89 df                	mov    %ebx,%edi
  401332:	e8 19 fd ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  401337:	89 df                	mov    %ebx,%edi
  401339:	be 66 61 00 00       	mov    $0x6166,%esi
  40133e:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 192;
  401340:	c7 44 24 2c c0 00 00 	movl   $0xc0,0x2c(%rsp)
  401347:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  401348:	e8 63 fd ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  40134d:	ba 04 00 00 00       	mov    $0x4,%edx
  401352:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  401357:	89 df                	mov    %ebx,%edi
  401359:	e8 f2 fc ff ff       	call   401050 <write@plt>
  40135e:	e9 93 fe ff ff       	jmp    4011f6 <main+0xf6>
  401363:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
				printf("botao 1\n");
  401368:	bf e2 20 40 00       	mov    $0x4020e2,%edi
  40136d:	e8 6e fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[0], 0);
  401372:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  401377:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40137c:	31 d2                	xor    %edx,%edx
  40137e:	eb 86                	jmp    401306 <main+0x206>
				printf("botao 2\n");
  401380:	bf da 20 40 00       	mov    $0x4020da,%edi
  401385:	e8 56 fd ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[1], 0);
  40138a:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40138f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401394:	31 d2                	xor    %edx,%edx
  401396:	bf 02 00 00 00       	mov    $0x2,%edi
  40139b:	e8 a0 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	            ioctl(fd, WR_R_DISPLAY);
  4013a0:	be 64 61 00 00       	mov    $0x6164,%esi
  4013a5:	89 df                	mov    %ebx,%edi
  4013a7:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFFA1;
  4013a9:	c7 44 24 28 a1 ff ff 	movl   $0xffffffa1,0x28(%rsp)
  4013b0:	ff 
	            ioctl(fd, WR_R_DISPLAY);
  4013b1:	e8 fa fc ff ff       	call   4010b0 <ioctl@plt>
	            retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4013b6:	ba 04 00 00 00       	mov    $0x4,%edx
  4013bb:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  4013c0:	89 df                	mov    %ebx,%edi
  4013c2:	e8 89 fc ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  4013c7:	be 66 61 00 00       	mov    $0x6166,%esi
  4013cc:	89 df                	mov    %ebx,%edi
  4013ce:	31 c0                	xor    %eax,%eax
	            unsigned int data_green_led = 48;
  4013d0:	c7 44 24 2c 30 00 00 	movl   $0x30,0x2c(%rsp)
  4013d7:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  4013d8:	e8 d3 fc ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  4013dd:	ba 04 00 00 00       	mov    $0x4,%edx
  4013e2:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4013e7:	89 df                	mov    %ebx,%edi
  4013e9:	e8 62 fc ff ff       	call   401050 <write@plt>
			if(data_push == 7){
  4013ee:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4013f2:	e9 f6 fd ff ff       	jmp    4011ed <main+0xed>
  4013f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4013fe:	00 00 
				printf("botao 3\n");
  401400:	bf d2 20 40 00       	mov    $0x4020d2,%edi
  401405:	e8 d6 fc ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[2], 0);
  40140a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  40140f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401414:	31 d2                	xor    %edx,%edx
  401416:	bf 02 00 00 00       	mov    $0x2,%edi
  40141b:	e8 20 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401420:	be 64 61 00 00       	mov    $0x6164,%esi
  401425:	89 df                	mov    %ebx,%edi
  401427:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFF86;
  401429:	c7 44 24 28 86 ff ff 	movl   $0xffffff86,0x28(%rsp)
  401430:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401431:	e8 7a fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  401436:	ba 04 00 00 00       	mov    $0x4,%edx
  40143b:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401440:	89 df                	mov    %ebx,%edi
  401442:	e8 09 fc ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  401447:	be 66 61 00 00       	mov    $0x6166,%esi
  40144c:	89 df                	mov    %ebx,%edi
  40144e:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 12;
  401450:	c7 44 24 2c 0c 00 00 	movl   $0xc,0x2c(%rsp)
  401457:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  401458:	e8 53 fc ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  40145d:	ba 04 00 00 00       	mov    $0x4,%edx
  401462:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  401467:	89 df                	mov    %ebx,%edi
  401469:	e8 e2 fb ff ff       	call   401050 <write@plt>
		if(data_push == 11){
  40146e:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401472:	e9 6d fd ff ff       	jmp    4011e4 <main+0xe4>
  401477:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40147e:	00 00 
				printf("botao 4\n");
  401480:	bf ca 20 40 00       	mov    $0x4020ca,%edi
  401485:	e8 56 fc ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[3], 0);
  40148a:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  40148f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401494:	31 d2                	xor    %edx,%edx
  401496:	bf 02 00 00 00       	mov    $0x2,%edi
  40149b:	e8 a0 fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4014a0:	be 64 61 00 00       	mov    $0x6164,%esi
  4014a5:	89 df                	mov    %ebx,%edi
  4014a7:	31 c0                	xor    %eax,%eax
               unsigned int data_display_direita = 0xFFFFFF8E;
  4014a9:	c7 44 24 28 8e ff ff 	movl   $0xffffff8e,0x28(%rsp)
  4014b0:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4014b1:	e8 fa fb ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4014b6:	ba 04 00 00 00       	mov    $0x4,%edx
  4014bb:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  4014c0:	89 df                	mov    %ebx,%edi
  4014c2:	e8 89 fb ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  4014c7:	be 66 61 00 00       	mov    $0x6166,%esi
  4014cc:	89 df                	mov    %ebx,%edi
  4014ce:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 3;
  4014d0:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  4014d7:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  4014d8:	e8 d3 fb ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  4014dd:	ba 04 00 00 00       	mov    $0x4,%edx
  4014e2:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4014e7:	89 df                	mov    %ebx,%edi
  4014e9:	e8 62 fb ff ff       	call   401050 <write@plt>
			if(data_push == 13){
  4014ee:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4014f2:	e9 e4 fc ff ff       	jmp    4011db <main+0xdb>
  4014f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4014fe:	00 00 
					Mix_PlayChannel(2, NotesStretched[1], 0);
  401500:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  401505:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40150a:	31 d2                	xor    %edx,%edx
  40150c:	bf 02 00 00 00       	mov    $0x2,%edi
  401511:	e8 2a fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401516:	be 64 61 00 00       	mov    $0x6164,%esi
  40151b:	89 df                	mov    %ebx,%edi
  40151d:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFA1;
  40151f:	c7 44 24 28 a1 ff ff 	movl   $0xffffffa1,0x28(%rsp)
  401526:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401527:	e8 84 fb ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40152c:	ba 04 00 00 00       	mov    $0x4,%edx
  401531:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401536:	89 df                	mov    %ebx,%edi
  401538:	e8 13 fb ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40153d:	be 66 61 00 00       	mov    $0x6166,%esi
  401542:	89 df                	mov    %ebx,%edi
  401544:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 48;
  401546:	c7 44 24 2c 30 00 00 	movl   $0x30,0x2c(%rsp)
  40154d:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  40154e:	e8 5d fb ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401553:	ba 04 00 00 00       	mov    $0x4,%edx
  401558:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40155d:	89 df                	mov    %ebx,%edi
  40155f:	e8 ec fa ff ff       	call   401050 <write@plt>
				if(data_push == 7){
  401564:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401568:	e9 84 fd ff ff       	jmp    4012f1 <main+0x1f1>
  40156d:	0f 1f 00             	nopl   (%rax)
					Mix_PlayChannel(2, NotesStretched[2], 0);
  401570:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  401575:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40157a:	31 d2                	xor    %edx,%edx
  40157c:	bf 02 00 00 00       	mov    $0x2,%edi
  401581:	e8 ba fa ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401586:	be 64 61 00 00       	mov    $0x6164,%esi
  40158b:	89 df                	mov    %ebx,%edi
  40158d:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF86;
  40158f:	c7 44 24 28 86 ff ff 	movl   $0xffffff86,0x28(%rsp)
  401596:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401597:	e8 14 fb ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40159c:	ba 04 00 00 00       	mov    $0x4,%edx
  4015a1:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  4015a6:	89 df                	mov    %ebx,%edi
  4015a8:	e8 a3 fa ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  4015ad:	be 66 61 00 00       	mov    $0x6166,%esi
  4015b2:	89 df                	mov    %ebx,%edi
  4015b4:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 12;
  4015b6:	c7 44 24 2c 0c 00 00 	movl   $0xc,0x2c(%rsp)
  4015bd:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  4015be:	e8 ed fa ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  4015c3:	ba 04 00 00 00       	mov    $0x4,%edx
  4015c8:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4015cd:	89 df                	mov    %ebx,%edi
  4015cf:	e8 7c fa ff ff       	call   401050 <write@plt>
				if(data_push == 11){
  4015d4:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4015d8:	e9 0b fd ff ff       	jmp    4012e8 <main+0x1e8>
  4015dd:	0f 1f 00             	nopl   (%rax)
					Mix_PlayChannel(2, NotesStretched[3], 0);
  4015e0:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  4015e5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4015ea:	31 d2                	xor    %edx,%edx
  4015ec:	bf 02 00 00 00       	mov    $0x2,%edi
  4015f1:	e8 4a fa ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4015f6:	be 64 61 00 00       	mov    $0x6164,%esi
  4015fb:	89 df                	mov    %ebx,%edi
  4015fd:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF8E;
  4015ff:	c7 44 24 28 8e ff ff 	movl   $0xffffff8e,0x28(%rsp)
  401606:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401607:	e8 a4 fa ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40160c:	ba 04 00 00 00       	mov    $0x4,%edx
  401611:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401616:	89 df                	mov    %ebx,%edi
  401618:	e8 33 fa ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40161d:	be 66 61 00 00       	mov    $0x6166,%esi
  401622:	89 df                	mov    %ebx,%edi
  401624:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 3;
  401626:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  40162d:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  40162e:	e8 7d fa ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401633:	ba 04 00 00 00       	mov    $0x4,%edx
  401638:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40163d:	89 df                	mov    %ebx,%edi
  40163f:	e8 0c fa ff ff       	call   401050 <write@plt>
				if(data_push == 13){
  401644:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401648:	e9 92 fc ff ff       	jmp    4012df <main+0x1df>
		printf("Syntax: %s <device file path>\n", argv[0]);
  40164d:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  401651:	bf f0 20 40 00       	mov    $0x4020f0,%edi
  401656:	31 c0                	xor    %eax,%eax
  401658:	e8 d3 f9 ff ff       	call   401030 <printf@plt>
		return -EINVAL;
  40165d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}

	close(fd);

	return 0;
}
  401662:	48 83 c4 78          	add    $0x78,%rsp
  401666:	5b                   	pop    %rbx
  401667:	5d                   	pop    %rbp
  401668:	c3                   	ret    
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  401669:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  40166d:	48 8b 3d 2c 2a 00 00 	mov    0x2a2c(%rip),%rdi        # 4040a0 <stderr@@GLIBC_2.2.5>
  401674:	be b3 20 40 00       	mov    $0x4020b3,%esi
  401679:	31 c0                	xor    %eax,%eax
  40167b:	e8 40 fa ff ff       	call   4010c0 <fprintf@plt>
		return -EBUSY;
  401680:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  401685:	eb db                	jmp    401662 <main+0x562>

0000000000401687 <.annobin_abi_note.c.hot>:
  401687:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40168e:	00 00 

0000000000401690 <_start>:
  401690:	f3 0f 1e fa          	endbr64 
  401694:	31 ed                	xor    %ebp,%ebp
  401696:	49 89 d1             	mov    %rdx,%r9
  401699:	5e                   	pop    %rsi
  40169a:	48 89 e2             	mov    %rsp,%rdx
  40169d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4016a1:	50                   	push   %rax
  4016a2:	54                   	push   %rsp
  4016a3:	45 31 c0             	xor    %r8d,%r8d
  4016a6:	31 c9                	xor    %ecx,%ecx
  4016a8:	48 c7 c7 00 11 40 00 	mov    $0x401100,%rdi
  4016af:	ff 15 3b 29 00 00    	call   *0x293b(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.34>
  4016b5:	f4                   	hlt    

00000000004016b6 <.annobin_abi_note.c>:
  4016b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4016bd:	00 00 00 

00000000004016c0 <_dl_relocate_static_pie>:
  4016c0:	f3 0f 1e fa          	endbr64 
  4016c4:	c3                   	ret    

00000000004016c5 <.annobin__dl_relocate_static_pie.end>:
  4016c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4016cc:	00 00 00 
  4016cf:	90                   	nop

00000000004016d0 <deregister_tm_clones>:
  4016d0:	b8 88 40 40 00       	mov    $0x404088,%eax
  4016d5:	48 3d 88 40 40 00    	cmp    $0x404088,%rax
  4016db:	74 13                	je     4016f0 <deregister_tm_clones+0x20>
  4016dd:	b8 00 00 00 00       	mov    $0x0,%eax
  4016e2:	48 85 c0             	test   %rax,%rax
  4016e5:	74 09                	je     4016f0 <deregister_tm_clones+0x20>
  4016e7:	bf 88 40 40 00       	mov    $0x404088,%edi
  4016ec:	ff e0                	jmp    *%rax
  4016ee:	66 90                	xchg   %ax,%ax
  4016f0:	c3                   	ret    
  4016f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4016f8:	00 00 00 00 
  4016fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401700 <register_tm_clones>:
  401700:	be 88 40 40 00       	mov    $0x404088,%esi
  401705:	48 81 ee 88 40 40 00 	sub    $0x404088,%rsi
  40170c:	48 89 f0             	mov    %rsi,%rax
  40170f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401713:	48 c1 f8 03          	sar    $0x3,%rax
  401717:	48 01 c6             	add    %rax,%rsi
  40171a:	48 d1 fe             	sar    %rsi
  40171d:	74 11                	je     401730 <register_tm_clones+0x30>
  40171f:	b8 00 00 00 00       	mov    $0x0,%eax
  401724:	48 85 c0             	test   %rax,%rax
  401727:	74 07                	je     401730 <register_tm_clones+0x30>
  401729:	bf 88 40 40 00       	mov    $0x404088,%edi
  40172e:	ff e0                	jmp    *%rax
  401730:	c3                   	ret    
  401731:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401738:	00 00 00 00 
  40173c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401740 <__do_global_dtors_aux>:
  401740:	f3 0f 1e fa          	endbr64 
  401744:	80 3d 5d 29 00 00 00 	cmpb   $0x0,0x295d(%rip)        # 4040a8 <completed.0>
  40174b:	75 13                	jne    401760 <__do_global_dtors_aux+0x20>
  40174d:	55                   	push   %rbp
  40174e:	48 89 e5             	mov    %rsp,%rbp
  401751:	e8 7a ff ff ff       	call   4016d0 <deregister_tm_clones>
  401756:	c6 05 4b 29 00 00 01 	movb   $0x1,0x294b(%rip)        # 4040a8 <completed.0>
  40175d:	5d                   	pop    %rbp
  40175e:	c3                   	ret    
  40175f:	90                   	nop
  401760:	c3                   	ret    
  401761:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401768:	00 00 00 00 
  40176c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401770 <frame_dummy>:
  401770:	f3 0f 1e fa          	endbr64 
  401774:	eb 8a                	jmp    401700 <register_tm_clones>
  401776:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40177d:	00 00 00 

0000000000401780 <LoadPiano>:

void LoadPiano(Mix_Chunk **Notes) {
  401780:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  401781:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPiano(Mix_Chunk **Notes) {
  401786:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  401789:	bf 13 20 40 00       	mov    $0x402013,%edi
  40178e:	e8 cd f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401793:	be 01 00 00 00       	mov    $0x1,%esi
  401798:	48 89 c7             	mov    %rax,%rdi
  40179b:	e8 50 f9 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  4017a0:	be 10 20 40 00       	mov    $0x402010,%esi
  4017a5:	bf 22 20 40 00       	mov    $0x402022,%edi
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4017aa:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  4017ad:	e8 ae f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4017b2:	be 01 00 00 00       	mov    $0x1,%esi
  4017b7:	48 89 c7             	mov    %rax,%rdi
  4017ba:	e8 31 f9 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  4017bf:	be 10 20 40 00       	mov    $0x402010,%esi
  4017c4:	bf 31 20 40 00       	mov    $0x402031,%edi
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  4017c9:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  4017cd:	e8 8e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4017d2:	be 01 00 00 00       	mov    $0x1,%esi
  4017d7:	48 89 c7             	mov    %rax,%rdi
  4017da:	e8 11 f9 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  4017df:	be 10 20 40 00       	mov    $0x402010,%esi
  4017e4:	bf 40 20 40 00       	mov    $0x402040,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  4017e9:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  4017ed:	e8 6e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4017f2:	be 01 00 00 00       	mov    $0x1,%esi
  4017f7:	48 89 c7             	mov    %rax,%rdi
  4017fa:	e8 f1 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  4017ff:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401803:	5b                   	pop    %rbx
  401804:	c3                   	ret    
  401805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40180c:	00 00 00 00 

0000000000401810 <LoadPianoStretched>:

void LoadPianoStretched(Mix_Chunk **Notes) {
  401810:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401811:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPianoStretched(Mix_Chunk **Notes) {
  401816:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401819:	bf 4f 20 40 00       	mov    $0x40204f,%edi
  40181e:	e8 3d f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401823:	be 01 00 00 00       	mov    $0x1,%esi
  401828:	48 89 c7             	mov    %rax,%rdi
  40182b:	e8 c0 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  401830:	be 10 20 40 00       	mov    $0x402010,%esi
  401835:	bf 68 20 40 00       	mov    $0x402068,%edi
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  40183a:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  40183d:	e8 1e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401842:	be 01 00 00 00       	mov    $0x1,%esi
  401847:	48 89 c7             	mov    %rax,%rdi
  40184a:	e8 a1 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  40184f:	be 10 20 40 00       	mov    $0x402010,%esi
  401854:	bf 81 20 40 00       	mov    $0x402081,%edi
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  401859:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  40185d:	e8 fe f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401862:	be 01 00 00 00       	mov    $0x1,%esi
  401867:	48 89 c7             	mov    %rax,%rdi
  40186a:	e8 81 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  40186f:	be 10 20 40 00       	mov    $0x402010,%esi
  401874:	bf 9a 20 40 00       	mov    $0x40209a,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  401879:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  40187d:	e8 de f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401882:	be 01 00 00 00       	mov    $0x1,%esi
  401887:	48 89 c7             	mov    %rax,%rdi
  40188a:	e8 61 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  40188f:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401893:	5b                   	pop    %rbx
  401894:	c3                   	ret    

Desmontagem da secção .fini:

0000000000401898 <_fini>:
  401898:	f3 0f 1e fa          	endbr64 
  40189c:	48 83 ec 08          	sub    $0x8,%rsp
  4018a0:	48 83 c4 08          	add    $0x8,%rsp
  4018a4:	c3                   	ret    
