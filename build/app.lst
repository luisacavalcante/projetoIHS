
build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000198  00000000004003e8  00000000004003e8  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000119  0000000000400580  0000000000400580  00000580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000022  000000000040069a  000000000040069a  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000030  00000000004006c0  00000000004006c0  000006c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000048  00000000004006f0  00000000004006f0  000006f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000138  0000000000400738  0000000000400738  00000738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000401000  0000000000401000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000000e0  0000000000401020  0000000000401020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         000007f5  0000000000401100  0000000000401100  00001100  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  00000000004018f8  00000000004018f8  000018f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000010f  0000000000402000  0000000000402000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 0000003c  0000000000402110  0000000000402110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000000d4  0000000000402150  0000000000402150  00002150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000008  0000000000403db0  0000000000403db0  00002db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000008  0000000000403db8  0000000000403db8  00002db8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000230  0000000000403dc0  0000000000403dc0  00002dc0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000010  0000000000403ff0  0000000000403ff0  00002ff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt      00000080  0000000000404000  0000000000404000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000004  0000000000404080  0000000000404080  00003080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000010  00000000004040a0  00000000004040a0  00003084  2**5
                  ALLOC
 25 .comment      0000002e  0000000000000000  0000000000000000  00003084  2**0
                  CONTENTS, READONLY
 26 .gnu.build.attributes 00001d1c  00000000004060b0  00000000004060b0  000030b4  2**2
                  CONTENTS, READONLY, OCTETS
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   000015f3  0000000000000000  0000000000000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 0000026c  0000000000000000  0000000000000000  00006403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   0000043b  0000000000000000  0000000000000000  0000666f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    000004e7  0000000000000000  0000000000000000  00006aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000152  0000000000000000  0000000000000000  00006f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 00000120  0000000000000000  0000000000000000  000070e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 00000048  0000000000000000  0000000000000000  00007203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e9 2f 00 00 	mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__@Base>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	call   *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000401020 <printf@plt-0x10>:
  401020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <printf@plt>:
  401030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 404018 <printf@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	push   $0x0
  40103b:	e9 e0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401040 <Mix_PlayChannelTimed@plt>:
  401040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 404020 <Mix_PlayChannelTimed@Base>
  401046:	68 01 00 00 00       	push   $0x1
  40104b:	e9 d0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401050 <write@plt>:
  401050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 404028 <write@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	push   $0x2
  40105b:	e9 c0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401060 <SDL_RWFromFile@plt>:
  401060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 404030 <SDL_RWFromFile@Base>
  401066:	68 03 00 00 00       	push   $0x3
  40106b:	e9 b0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401070 <Mix_OpenAudio@plt>:
  401070:	ff 25 c2 2f 00 00    	jmp    *0x2fc2(%rip)        # 404038 <Mix_OpenAudio@Base>
  401076:	68 04 00 00 00       	push   $0x4
  40107b:	e9 a0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401080 <open@plt>:
  401080:	ff 25 ba 2f 00 00    	jmp    *0x2fba(%rip)        # 404040 <open@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	push   $0x5
  40108b:	e9 90 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401090 <sleep@plt>:
  401090:	ff 25 b2 2f 00 00    	jmp    *0x2fb2(%rip)        # 404048 <sleep@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	push   $0x6
  40109b:	e9 80 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010a0 <Mix_Init@plt>:
  4010a0:	ff 25 aa 2f 00 00    	jmp    *0x2faa(%rip)        # 404050 <Mix_Init@Base>
  4010a6:	68 07 00 00 00       	push   $0x7
  4010ab:	e9 70 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010b0 <ioctl@plt>:
  4010b0:	ff 25 a2 2f 00 00    	jmp    *0x2fa2(%rip)        # 404058 <ioctl@GLIBC_2.2.5>
  4010b6:	68 08 00 00 00       	push   $0x8
  4010bb:	e9 60 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010c0 <fprintf@plt>:
  4010c0:	ff 25 9a 2f 00 00    	jmp    *0x2f9a(%rip)        # 404060 <fprintf@GLIBC_2.2.5>
  4010c6:	68 09 00 00 00       	push   $0x9
  4010cb:	e9 50 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010d0 <read@plt>:
  4010d0:	ff 25 92 2f 00 00    	jmp    *0x2f92(%rip)        # 404068 <read@GLIBC_2.2.5>
  4010d6:	68 0a 00 00 00       	push   $0xa
  4010db:	e9 40 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010e0 <puts@plt>:
  4010e0:	ff 25 8a 2f 00 00    	jmp    *0x2f8a(%rip)        # 404070 <puts@GLIBC_2.2.5>
  4010e6:	68 0b 00 00 00       	push   $0xb
  4010eb:	e9 30 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010f0 <Mix_LoadWAV_RW@plt>:
  4010f0:	ff 25 82 2f 00 00    	jmp    *0x2f82(%rip)        # 404078 <Mix_LoadWAV_RW@Base>
  4010f6:	68 0c 00 00 00       	push   $0xc
  4010fb:	e9 20 ff ff ff       	jmp    401020 <_init+0x20>

Desmontagem da secção .text:

0000000000401100 <main>:

void LoadPiano(Mix_Chunk **Notes);
void LoadPianoStretched(Mix_Chunk **Notes);

int main(int argc, char** argv)
{
  401100:	55                   	push   %rbp
  401101:	48 89 f5             	mov    %rsi,%rbp
  401104:	53                   	push   %rbx
  401105:	89 fb                	mov    %edi,%ebx
    const uint32_t hex_c = 0xFFFFFF46, hex_a = 0xFFFFFF08, hex_g = 0xFFFFFF42, hex_f = 0xFFFFFF0E;

	// Quando apertar a nota, mostrar no display a nota em inglês


    	Mix_Init(MIX_INIT_MID);
  401107:	bf 20 00 00 00       	mov    $0x20,%edi
{
  40110c:	48 83 ec 78          	sub    $0x78,%rsp
    	Mix_Init(MIX_INIT_MID);
  401110:	e8 8b ff ff ff       	call   4010a0 <Mix_Init@plt>
	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);
  401115:	b9 00 08 00 00       	mov    $0x800,%ecx
  40111a:	ba 02 00 00 00       	mov    $0x2,%edx
  40111f:	be 10 80 00 00       	mov    $0x8010,%esi
  401124:	bf 44 ac 00 00       	mov    $0xac44,%edi
  401129:	e8 42 ff ff ff       	call   401070 <Mix_OpenAudio@plt>
	Mix_Chunk *Notes[NotesNUM];
	Mix_Chunk *NotesStretched[NotesNUM];

	LoadPiano(Notes);
  40112e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  401133:	e8 a8 06 00 00       	call   4017e0 <LoadPiano>
	LoadPianoStretched(NotesStretched);
  401138:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  40113d:	e8 2e 07 00 00       	call   401870 <LoadPianoStretched>

	//while(1) {
		//Mix_PlayChannel(2, Notes[3], 0);
	//}

	if (argc < 2) {
  401142:	83 fb 01             	cmp    $0x1,%ebx
  401145:	0f 8e 62 05 00 00    	jle    4016ad <main+0x5ad>
		printf("Syntax: %s <device file path>\n", argv[0]);
		return -EINVAL;
	}

	if ((fd = open(argv[1], O_RDWR)) < 0) {
  40114b:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  40114f:	be 02 00 00 00       	mov    $0x2,%esi
  401154:	31 c0                	xor    %eax,%eax
  401156:	e8 25 ff ff ff       	call   401080 <open@plt>
  40115b:	89 c3                	mov    %eax,%ebx
  40115d:	85 c0                	test   %eax,%eax
  40115f:	0f 88 64 05 00 00    	js     4016c9 <main+0x5c9>
		fprintf(stderr, "Error opening file %s\n", argv[1]);
		return -EBUSY;
	}
	unsigned int data_display_esquerda = 0xFFFFFFFF;
	    ioctl(fd, WR_L_DISPLAY);
  401165:	89 c7                	mov    %eax,%edi
  401167:	be 63 61 00 00       	mov    $0x6163,%esi
  40116c:	31 c0                	xor    %eax,%eax
	int cnt = 0;
  40116e:	31 ed                	xor    %ebp,%ebp
	unsigned int data_display_esquerda = 0xFFFFFFFF;
  401170:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  401177:	ff 
	    ioctl(fd, WR_L_DISPLAY);
  401178:	e8 33 ff ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_esquerda, sizeof(data_display_esquerda));
  40117d:	ba 04 00 00 00       	mov    $0x4,%edx
  401182:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  401187:	89 df                	mov    %ebx,%edi
  401189:	e8 c2 fe ff ff       	call   401050 <write@plt>

	unsigned int data_display_direita = 0xFFFFFFFF;
	    ioctl(fd, WR_R_DISPLAY);
  40118e:	be 64 61 00 00       	mov    $0x6164,%esi
  401193:	89 df                	mov    %ebx,%edi
  401195:	31 c0                	xor    %eax,%eax
	unsigned int data_display_direita = 0xFFFFFFFF;
  401197:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  40119e:	ff 
	    ioctl(fd, WR_R_DISPLAY);
  40119f:	e8 0c ff ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4011a4:	ba 04 00 00 00       	mov    $0x4,%edx
  4011a9:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4011ae:	89 df                	mov    %ebx,%edi
  4011b0:	e8 9b fe ff ff       	call   401050 <write@plt>
  4011b5:	e9 b5 00 00 00       	jmp    40126f <main+0x16f>
  4011ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        unsigned int data_switch = 0;
		ioctl(fd, RD_SWITCHES);
	    read(fd, &data_switch, 1);
		if(data_switch > 0){
            unsigned int data_push = 0;
            ioctl(fd, RD_PBUTTONS);
  4011c0:	be 62 61 00 00       	mov    $0x6162,%esi
  4011c5:	89 df                	mov    %ebx,%edi
  4011c7:	31 c0                	xor    %eax,%eax
            unsigned int data_push = 0;
  4011c9:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  4011d0:	00 
            ioctl(fd, RD_PBUTTONS);
  4011d1:	e8 da fe ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  4011d6:	ba 01 00 00 00       	mov    $0x1,%edx
  4011db:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4011e0:	89 df                	mov    %ebx,%edi
  4011e2:	e8 e9 fe ff ff       	call   4010d0 <read@plt>
	        unsigned int data_red_led = 131073;
	   		ioctl(fd, WR_RED_LEDS);
  4011e7:	be 65 61 00 00       	mov    $0x6165,%esi
  4011ec:	89 df                	mov    %ebx,%edi
  4011ee:	31 c0                	xor    %eax,%eax
	        unsigned int data_red_led = 131073;
  4011f0:	c7 44 24 24 01 00 02 	movl   $0x20001,0x24(%rsp)
  4011f7:	00 
	   		ioctl(fd, WR_RED_LEDS);
  4011f8:	e8 b3 fe ff ff       	call   4010b0 <ioctl@plt>
	    	write(fd, &data_red_led, sizeof(data_red_led));
  4011fd:	ba 04 00 00 00       	mov    $0x4,%edx
  401202:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
  401207:	89 df                	mov    %ebx,%edi
  401209:	e8 42 fe ff ff       	call   401050 <write@plt>
	        
			// Notas normais
			if(data_push == 14){
  40120e:	8b 44 24 20          	mov    0x20(%rsp),%eax
  401212:	83 f8 0e             	cmp    $0xe,%eax
  401215:	0f 84 25 03 00 00    	je     401540 <main+0x440>
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar F no D7

			}
			if(data_push == 13){
  40121b:	83 f8 0d             	cmp    $0xd,%eax
  40121e:	0f 84 97 03 00 00    	je     4015bb <main+0x4bb>
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));

					// Printar E no D7
			}
		if(data_push == 11){
  401224:	83 f8 0b             	cmp    $0xb,%eax
  401227:	0f 84 09 04 00 00    	je     401636 <main+0x536>
	            unsigned int data_green_led = 48;
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar D no D7
			}
			if(data_push == 7){
  40122d:	83 f8 07             	cmp    $0x7,%eax
  401230:	0f 84 ea 02 00 00    	je     401520 <main+0x420>
	    			ioctl(fd, WR_GREEN_LEDS);
	    			write(fd, &data_green_led, sizeof(data_green_led));
					// Printar C no D7
				}
			}
			if ((cnt % 2) == 0) {
  401236:	40 f6 c5 01          	test   $0x1,%bpl
  40123a:	75 26                	jne    401262 <main+0x162>
				data_red_led ^= 131072;
				ioctl(fd, WR_RED_LEDS);
  40123c:	be 65 61 00 00       	mov    $0x6165,%esi
  401241:	89 df                	mov    %ebx,%edi
  401243:	31 c0                	xor    %eax,%eax
				data_red_led ^= 131072;
  401245:	81 74 24 14 00 00 02 	xorl   $0x20000,0x14(%rsp)
  40124c:	00 
				ioctl(fd, WR_RED_LEDS);
  40124d:	e8 5e fe ff ff       	call   4010b0 <ioctl@plt>
				write(fd, data_red_led, sizeof(data_red_led));
  401252:	8b 74 24 14          	mov    0x14(%rsp),%esi
  401256:	ba 04 00 00 00       	mov    $0x4,%edx
  40125b:	89 df                	mov    %ebx,%edi
  40125d:	e8 ee fd ff ff       	call   401050 <write@plt>
			}
			cnt++;
        	sleep(1);
  401262:	bf 01 00 00 00       	mov    $0x1,%edi
			cnt++;
  401267:	83 c5 01             	add    $0x1,%ebp
        	sleep(1);
  40126a:	e8 21 fe ff ff       	call   401090 <sleep@plt>
	    ioctl(fd, WR_GREEN_LEDS);
  40126f:	be 66 61 00 00       	mov    $0x6166,%esi
  401274:	89 df                	mov    %ebx,%edi
  401276:	31 c0                	xor    %eax,%eax
        unsigned int data_green_led = 0;
  401278:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  40127f:	00 
	    ioctl(fd, WR_GREEN_LEDS);
  401280:	e8 2b fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_green_led, sizeof(data_green_led));
  401285:	ba 04 00 00 00       	mov    $0x4,%edx
  40128a:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  40128f:	89 df                	mov    %ebx,%edi
  401291:	e8 ba fd ff ff       	call   401050 <write@plt>
	    ioctl(fd, WR_RED_LEDS);
  401296:	be 65 61 00 00       	mov    $0x6165,%esi
  40129b:	89 df                	mov    %ebx,%edi
  40129d:	31 c0                	xor    %eax,%eax
	    unsigned int data_red_led = 131072;
  40129f:	c7 44 24 14 00 00 02 	movl   $0x20000,0x14(%rsp)
  4012a6:	00 
	    ioctl(fd, WR_RED_LEDS);
  4012a7:	e8 04 fe ff ff       	call   4010b0 <ioctl@plt>
	    write(fd, &data_red_led, sizeof(data_red_led));
  4012ac:	ba 04 00 00 00       	mov    $0x4,%edx
  4012b1:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
  4012b6:	89 df                	mov    %ebx,%edi
  4012b8:	e8 93 fd ff ff       	call   401050 <write@plt>
	    ioctl(fd, WR_L_DISPLAY);
  4012bd:	be 63 61 00 00       	mov    $0x6163,%esi
  4012c2:	89 df                	mov    %ebx,%edi
  4012c4:	31 c0                	xor    %eax,%eax
	    unsigned int data_display_esquerda = 0xFFFFFFFF;
  4012c6:	c7 44 24 18 ff ff ff 	movl   $0xffffffff,0x18(%rsp)
  4012cd:	ff 
	    ioctl(fd, WR_L_DISPLAY);
  4012ce:	e8 dd fd ff ff       	call   4010b0 <ioctl@plt>
	    retval = write(fd, &data_display_esquerda, sizeof(data_display_esquerda));
  4012d3:	ba 04 00 00 00       	mov    $0x4,%edx
  4012d8:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  4012dd:	89 df                	mov    %ebx,%edi
  4012df:	e8 6c fd ff ff       	call   401050 <write@plt>
		ioctl(fd, RD_SWITCHES);
  4012e4:	be 61 61 00 00       	mov    $0x6161,%esi
  4012e9:	89 df                	mov    %ebx,%edi
  4012eb:	31 c0                	xor    %eax,%eax
        unsigned int data_switch = 0;
  4012ed:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  4012f4:	00 
		ioctl(fd, RD_SWITCHES);
  4012f5:	e8 b6 fd ff ff       	call   4010b0 <ioctl@plt>
	    read(fd, &data_switch, 1);
  4012fa:	ba 01 00 00 00       	mov    $0x1,%edx
  4012ff:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
  401304:	89 df                	mov    %ebx,%edi
  401306:	e8 c5 fd ff ff       	call   4010d0 <read@plt>
		if(data_switch > 0){
  40130b:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  40130f:	85 c0                	test   %eax,%eax
  401311:	0f 85 a9 fe ff ff    	jne    4011c0 <main+0xc0>
            ioctl(fd, RD_PBUTTONS);
  401317:	be 62 61 00 00       	mov    $0x6162,%esi
  40131c:	89 df                	mov    %ebx,%edi
  40131e:	31 c0                	xor    %eax,%eax
            unsigned int data_push = 0;
  401320:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  401327:	00 
            ioctl(fd, RD_PBUTTONS);
  401328:	e8 83 fd ff ff       	call   4010b0 <ioctl@plt>
	        read(fd, &data_push, 1);
  40132d:	ba 01 00 00 00       	mov    $0x1,%edx
  401332:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
  401337:	89 df                	mov    %ebx,%edi
  401339:	e8 92 fd ff ff       	call   4010d0 <read@plt>
				if(data_push == 14){
  40133e:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401342:	83 f8 0e             	cmp    $0xe,%eax
  401345:	0f 84 65 01 00 00    	je     4014b0 <main+0x3b0>
				if(data_push == 13){
  40134b:	83 f8 0d             	cmp    $0xd,%eax
  40134e:	0f 84 ec 00 00 00    	je     401440 <main+0x340>
				if(data_push == 11){
  401354:	83 f8 0b             	cmp    $0xb,%eax
  401357:	74 77                	je     4013d0 <main+0x2d0>
				if(data_push == 7){
  401359:	83 f8 07             	cmp    $0x7,%eax
  40135c:	0f 85 d4 fe ff ff    	jne    401236 <main+0x136>
					Mix_PlayChannel(2, NotesStretched[0], 0);
  401362:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  401367:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40136c:	31 d2                	xor    %edx,%edx
  40136e:	bf 02 00 00 00       	mov    $0x2,%edi
  401373:	e8 c8 fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401378:	89 df                	mov    %ebx,%edi
  40137a:	be 64 61 00 00       	mov    $0x6164,%esi
  40137f:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFC6;
  401381:	c7 44 24 28 c6 ff ff 	movl   $0xffffffc6,0x28(%rsp)
  401388:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401389:	e8 22 fd ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40138e:	ba 04 00 00 00       	mov    $0x4,%edx
  401393:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401398:	89 df                	mov    %ebx,%edi
  40139a:	e8 b1 fc ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40139f:	89 df                	mov    %ebx,%edi
  4013a1:	be 66 61 00 00       	mov    $0x6166,%esi
  4013a6:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 192;
  4013a8:	c7 44 24 2c c0 00 00 	movl   $0xc0,0x2c(%rsp)
  4013af:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  4013b0:	e8 fb fc ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  4013b5:	ba 04 00 00 00       	mov    $0x4,%edx
  4013ba:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4013bf:	89 df                	mov    %ebx,%edi
  4013c1:	e8 8a fc ff ff       	call   401050 <write@plt>
  4013c6:	e9 6b fe ff ff       	jmp    401236 <main+0x136>
  4013cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
					Mix_PlayChannel(2, NotesStretched[1], 0);
  4013d0:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  4013d5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4013da:	31 d2                	xor    %edx,%edx
  4013dc:	bf 02 00 00 00       	mov    $0x2,%edi
  4013e1:	e8 5a fc ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4013e6:	be 64 61 00 00       	mov    $0x6164,%esi
  4013eb:	89 df                	mov    %ebx,%edi
  4013ed:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFFA1;
  4013ef:	c7 44 24 28 a1 ff ff 	movl   $0xffffffa1,0x28(%rsp)
  4013f6:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4013f7:	e8 b4 fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4013fc:	ba 04 00 00 00       	mov    $0x4,%edx
  401401:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401406:	89 df                	mov    %ebx,%edi
  401408:	e8 43 fc ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40140d:	be 66 61 00 00       	mov    $0x6166,%esi
  401412:	89 df                	mov    %ebx,%edi
  401414:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 48;
  401416:	c7 44 24 2c 30 00 00 	movl   $0x30,0x2c(%rsp)
  40141d:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  40141e:	e8 8d fc ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401423:	ba 04 00 00 00       	mov    $0x4,%edx
  401428:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40142d:	89 df                	mov    %ebx,%edi
  40142f:	e8 1c fc ff ff       	call   401050 <write@plt>
				if(data_push == 7){
  401434:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401438:	e9 1c ff ff ff       	jmp    401359 <main+0x259>
  40143d:	0f 1f 00             	nopl   (%rax)
					Mix_PlayChannel(2, NotesStretched[2], 0);
  401440:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  401445:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40144a:	31 d2                	xor    %edx,%edx
  40144c:	bf 02 00 00 00       	mov    $0x2,%edi
  401451:	e8 ea fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401456:	be 64 61 00 00       	mov    $0x6164,%esi
  40145b:	89 df                	mov    %ebx,%edi
  40145d:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF86;
  40145f:	c7 44 24 28 86 ff ff 	movl   $0xffffff86,0x28(%rsp)
  401466:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401467:	e8 44 fc ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40146c:	ba 04 00 00 00       	mov    $0x4,%edx
  401471:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401476:	89 df                	mov    %ebx,%edi
  401478:	e8 d3 fb ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40147d:	be 66 61 00 00       	mov    $0x6166,%esi
  401482:	89 df                	mov    %ebx,%edi
  401484:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 12;
  401486:	c7 44 24 2c 0c 00 00 	movl   $0xc,0x2c(%rsp)
  40148d:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  40148e:	e8 1d fc ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401493:	ba 04 00 00 00       	mov    $0x4,%edx
  401498:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40149d:	89 df                	mov    %ebx,%edi
  40149f:	e8 ac fb ff ff       	call   401050 <write@plt>
				if(data_push == 11){
  4014a4:	8b 44 24 24          	mov    0x24(%rsp),%eax
  4014a8:	e9 a7 fe ff ff       	jmp    401354 <main+0x254>
  4014ad:	0f 1f 00             	nopl   (%rax)
					Mix_PlayChannel(2, NotesStretched[3], 0);
  4014b0:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  4014b5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4014ba:	31 d2                	xor    %edx,%edx
  4014bc:	bf 02 00 00 00       	mov    $0x2,%edi
  4014c1:	e8 7a fb ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4014c6:	be 64 61 00 00       	mov    $0x6164,%esi
  4014cb:	89 df                	mov    %ebx,%edi
  4014cd:	31 c0                	xor    %eax,%eax
                    unsigned int data_display_direita = 0xFFFFFF8E;
  4014cf:	c7 44 24 28 8e ff ff 	movl   $0xffffff8e,0x28(%rsp)
  4014d6:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4014d7:	e8 d4 fb ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4014dc:	ba 04 00 00 00       	mov    $0x4,%edx
  4014e1:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  4014e6:	89 df                	mov    %ebx,%edi
  4014e8:	e8 63 fb ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  4014ed:	be 66 61 00 00       	mov    $0x6166,%esi
  4014f2:	89 df                	mov    %ebx,%edi
  4014f4:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 3;
  4014f6:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  4014fd:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  4014fe:	e8 ad fb ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401503:	ba 04 00 00 00       	mov    $0x4,%edx
  401508:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40150d:	89 df                	mov    %ebx,%edi
  40150f:	e8 3c fb ff ff       	call   401050 <write@plt>
				if(data_push == 13){
  401514:	8b 44 24 24          	mov    0x24(%rsp),%eax
  401518:	e9 2e fe ff ff       	jmp    40134b <main+0x24b>
  40151d:	0f 1f 00             	nopl   (%rax)
				printf("botao 1\n");
  401520:	bf e2 20 40 00       	mov    $0x4020e2,%edi
  401525:	e8 b6 fb ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[0], 0);
  40152a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  40152f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401534:	31 d2                	xor    %edx,%edx
  401536:	e9 33 fe ff ff       	jmp    40136e <main+0x26e>
  40153b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
				printf("botao 4\n");
  401540:	bf ca 20 40 00       	mov    $0x4020ca,%edi
  401545:	e8 96 fb ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[3], 0);
  40154a:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
  40154f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  401554:	31 d2                	xor    %edx,%edx
  401556:	bf 02 00 00 00       	mov    $0x2,%edi
  40155b:	e8 e0 fa ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  401560:	be 64 61 00 00       	mov    $0x6164,%esi
  401565:	89 df                	mov    %ebx,%edi
  401567:	31 c0                	xor    %eax,%eax
               unsigned int data_display_direita = 0xFFFFFF8E;
  401569:	c7 44 24 28 8e ff ff 	movl   $0xffffff8e,0x28(%rsp)
  401570:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  401571:	e8 3a fb ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  401576:	ba 04 00 00 00       	mov    $0x4,%edx
  40157b:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401580:	89 df                	mov    %ebx,%edi
  401582:	e8 c9 fa ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  401587:	be 66 61 00 00       	mov    $0x6166,%esi
  40158c:	89 df                	mov    %ebx,%edi
  40158e:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 3;
  401590:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  401597:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  401598:	e8 13 fb ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  40159d:	ba 04 00 00 00       	mov    $0x4,%edx
  4015a2:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4015a7:	89 df                	mov    %ebx,%edi
  4015a9:	e8 a2 fa ff ff       	call   401050 <write@plt>
			if(data_push == 13){
  4015ae:	8b 44 24 20          	mov    0x20(%rsp),%eax
  4015b2:	83 f8 0d             	cmp    $0xd,%eax
  4015b5:	0f 85 69 fc ff ff    	jne    401224 <main+0x124>
				printf("botao 3\n");
  4015bb:	bf d2 20 40 00       	mov    $0x4020d2,%edi
  4015c0:	e8 1b fb ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[2], 0);
  4015c5:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  4015ca:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  4015cf:	31 d2                	xor    %edx,%edx
  4015d1:	bf 02 00 00 00       	mov    $0x2,%edi
  4015d6:	e8 65 fa ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	                ioctl(fd, WR_R_DISPLAY);
  4015db:	be 64 61 00 00       	mov    $0x6164,%esi
  4015e0:	89 df                	mov    %ebx,%edi
  4015e2:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFF86;
  4015e4:	c7 44 24 28 86 ff ff 	movl   $0xffffff86,0x28(%rsp)
  4015eb:	ff 
	                ioctl(fd, WR_R_DISPLAY);
  4015ec:	e8 bf fa ff ff       	call   4010b0 <ioctl@plt>
	                retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  4015f1:	ba 04 00 00 00       	mov    $0x4,%edx
  4015f6:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  4015fb:	89 df                	mov    %ebx,%edi
  4015fd:	e8 4e fa ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  401602:	be 66 61 00 00       	mov    $0x6166,%esi
  401607:	89 df                	mov    %ebx,%edi
  401609:	31 c0                	xor    %eax,%eax
	                unsigned int data_green_led = 12;
  40160b:	c7 44 24 2c 0c 00 00 	movl   $0xc,0x2c(%rsp)
  401612:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  401613:	e8 98 fa ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401618:	ba 04 00 00 00       	mov    $0x4,%edx
  40161d:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  401622:	89 df                	mov    %ebx,%edi
  401624:	e8 27 fa ff ff       	call   401050 <write@plt>
		if(data_push == 11){
  401629:	8b 44 24 20          	mov    0x20(%rsp),%eax
  40162d:	83 f8 0b             	cmp    $0xb,%eax
  401630:	0f 85 f7 fb ff ff    	jne    40122d <main+0x12d>
				printf("botao 2\n");
  401636:	bf da 20 40 00       	mov    $0x4020da,%edi
  40163b:	e8 a0 fa ff ff       	call   4010e0 <puts@plt>
				Mix_PlayChannel(2, Notes[1], 0);
  401640:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  401645:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  40164a:	31 d2                	xor    %edx,%edx
  40164c:	bf 02 00 00 00       	mov    $0x2,%edi
  401651:	e8 ea f9 ff ff       	call   401040 <Mix_PlayChannelTimed@plt>
	            ioctl(fd, WR_R_DISPLAY);
  401656:	be 64 61 00 00       	mov    $0x6164,%esi
  40165b:	89 df                	mov    %ebx,%edi
  40165d:	31 c0                	xor    %eax,%eax
                unsigned int data_display_direita = 0xFFFFFFA1;
  40165f:	c7 44 24 28 a1 ff ff 	movl   $0xffffffa1,0x28(%rsp)
  401666:	ff 
	            ioctl(fd, WR_R_DISPLAY);
  401667:	e8 44 fa ff ff       	call   4010b0 <ioctl@plt>
	            retval = write(fd, &data_display_direita, sizeof(data_display_direita));
  40166c:	ba 04 00 00 00       	mov    $0x4,%edx
  401671:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  401676:	89 df                	mov    %ebx,%edi
  401678:	e8 d3 f9 ff ff       	call   401050 <write@plt>
	    			ioctl(fd, WR_GREEN_LEDS);
  40167d:	be 66 61 00 00       	mov    $0x6166,%esi
  401682:	89 df                	mov    %ebx,%edi
  401684:	31 c0                	xor    %eax,%eax
	            unsigned int data_green_led = 48;
  401686:	c7 44 24 2c 30 00 00 	movl   $0x30,0x2c(%rsp)
  40168d:	00 
	    			ioctl(fd, WR_GREEN_LEDS);
  40168e:	e8 1d fa ff ff       	call   4010b0 <ioctl@plt>
	    			write(fd, &data_green_led, sizeof(data_green_led));
  401693:	ba 04 00 00 00       	mov    $0x4,%edx
  401698:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  40169d:	89 df                	mov    %ebx,%edi
  40169f:	e8 ac f9 ff ff       	call   401050 <write@plt>
			if(data_push == 7){
  4016a4:	8b 44 24 20          	mov    0x20(%rsp),%eax
  4016a8:	e9 80 fb ff ff       	jmp    40122d <main+0x12d>
		printf("Syntax: %s <device file path>\n", argv[0]);
  4016ad:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  4016b1:	bf f0 20 40 00       	mov    $0x4020f0,%edi
  4016b6:	31 c0                	xor    %eax,%eax
  4016b8:	e8 73 f9 ff ff       	call   401030 <printf@plt>
		return -EINVAL;
  4016bd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}

	close(fd);

	return 0;
}
  4016c2:	48 83 c4 78          	add    $0x78,%rsp
  4016c6:	5b                   	pop    %rbx
  4016c7:	5d                   	pop    %rbp
  4016c8:	c3                   	ret    
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  4016c9:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  4016cd:	48 8b 3d cc 29 00 00 	mov    0x29cc(%rip),%rdi        # 4040a0 <stderr@@GLIBC_2.2.5>
  4016d4:	be b3 20 40 00       	mov    $0x4020b3,%esi
  4016d9:	31 c0                	xor    %eax,%eax
  4016db:	e8 e0 f9 ff ff       	call   4010c0 <fprintf@plt>
		return -EBUSY;
  4016e0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  4016e5:	eb db                	jmp    4016c2 <main+0x5c2>

00000000004016e7 <.annobin_abi_note.c.hot>:
  4016e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4016ee:	00 00 

00000000004016f0 <_start>:
  4016f0:	f3 0f 1e fa          	endbr64 
  4016f4:	31 ed                	xor    %ebp,%ebp
  4016f6:	49 89 d1             	mov    %rdx,%r9
  4016f9:	5e                   	pop    %rsi
  4016fa:	48 89 e2             	mov    %rsp,%rdx
  4016fd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401701:	50                   	push   %rax
  401702:	54                   	push   %rsp
  401703:	45 31 c0             	xor    %r8d,%r8d
  401706:	31 c9                	xor    %ecx,%ecx
  401708:	48 c7 c7 00 11 40 00 	mov    $0x401100,%rdi
  40170f:	ff 15 db 28 00 00    	call   *0x28db(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.34>
  401715:	f4                   	hlt    

0000000000401716 <.annobin_abi_note.c>:
  401716:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40171d:	00 00 00 

0000000000401720 <_dl_relocate_static_pie>:
  401720:	f3 0f 1e fa          	endbr64 
  401724:	c3                   	ret    

0000000000401725 <.annobin__dl_relocate_static_pie.end>:
  401725:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40172c:	00 00 00 
  40172f:	90                   	nop

0000000000401730 <deregister_tm_clones>:
  401730:	b8 88 40 40 00       	mov    $0x404088,%eax
  401735:	48 3d 88 40 40 00    	cmp    $0x404088,%rax
  40173b:	74 13                	je     401750 <deregister_tm_clones+0x20>
  40173d:	b8 00 00 00 00       	mov    $0x0,%eax
  401742:	48 85 c0             	test   %rax,%rax
  401745:	74 09                	je     401750 <deregister_tm_clones+0x20>
  401747:	bf 88 40 40 00       	mov    $0x404088,%edi
  40174c:	ff e0                	jmp    *%rax
  40174e:	66 90                	xchg   %ax,%ax
  401750:	c3                   	ret    
  401751:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401758:	00 00 00 00 
  40175c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401760 <register_tm_clones>:
  401760:	be 88 40 40 00       	mov    $0x404088,%esi
  401765:	48 81 ee 88 40 40 00 	sub    $0x404088,%rsi
  40176c:	48 89 f0             	mov    %rsi,%rax
  40176f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  401773:	48 c1 f8 03          	sar    $0x3,%rax
  401777:	48 01 c6             	add    %rax,%rsi
  40177a:	48 d1 fe             	sar    %rsi
  40177d:	74 11                	je     401790 <register_tm_clones+0x30>
  40177f:	b8 00 00 00 00       	mov    $0x0,%eax
  401784:	48 85 c0             	test   %rax,%rax
  401787:	74 07                	je     401790 <register_tm_clones+0x30>
  401789:	bf 88 40 40 00       	mov    $0x404088,%edi
  40178e:	ff e0                	jmp    *%rax
  401790:	c3                   	ret    
  401791:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401798:	00 00 00 00 
  40179c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004017a0 <__do_global_dtors_aux>:
  4017a0:	f3 0f 1e fa          	endbr64 
  4017a4:	80 3d fd 28 00 00 00 	cmpb   $0x0,0x28fd(%rip)        # 4040a8 <completed.0>
  4017ab:	75 13                	jne    4017c0 <__do_global_dtors_aux+0x20>
  4017ad:	55                   	push   %rbp
  4017ae:	48 89 e5             	mov    %rsp,%rbp
  4017b1:	e8 7a ff ff ff       	call   401730 <deregister_tm_clones>
  4017b6:	c6 05 eb 28 00 00 01 	movb   $0x1,0x28eb(%rip)        # 4040a8 <completed.0>
  4017bd:	5d                   	pop    %rbp
  4017be:	c3                   	ret    
  4017bf:	90                   	nop
  4017c0:	c3                   	ret    
  4017c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4017c8:	00 00 00 00 
  4017cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004017d0 <frame_dummy>:
  4017d0:	f3 0f 1e fa          	endbr64 
  4017d4:	eb 8a                	jmp    401760 <register_tm_clones>
  4017d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4017dd:	00 00 00 

00000000004017e0 <LoadPiano>:

void LoadPiano(Mix_Chunk **Notes) {
  4017e0:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4017e1:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPiano(Mix_Chunk **Notes) {
  4017e6:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  4017e9:	bf 13 20 40 00       	mov    $0x402013,%edi
  4017ee:	e8 6d f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4017f3:	be 01 00 00 00       	mov    $0x1,%esi
  4017f8:	48 89 c7             	mov    %rax,%rdi
  4017fb:	e8 f0 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  401800:	be 10 20 40 00       	mov    $0x402010,%esi
  401805:	bf 22 20 40 00       	mov    $0x402022,%edi
	Notes[0] = Mix_LoadWAV("Samples/do.wav");
  40180a:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  40180d:	e8 4e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401812:	be 01 00 00 00       	mov    $0x1,%esi
  401817:	48 89 c7             	mov    %rax,%rdi
  40181a:	e8 d1 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40181f:	be 10 20 40 00       	mov    $0x402010,%esi
  401824:	bf 31 20 40 00       	mov    $0x402031,%edi
    Notes[1] = Mix_LoadWAV("Samples/re.wav");
  401829:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  40182d:	e8 2e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401832:	be 01 00 00 00       	mov    $0x1,%esi
  401837:	48 89 c7             	mov    %rax,%rdi
  40183a:	e8 b1 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40183f:	be 10 20 40 00       	mov    $0x402010,%esi
  401844:	bf 40 20 40 00       	mov    $0x402040,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi.wav");
  401849:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa.wav");
  40184d:	e8 0e f8 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401852:	be 01 00 00 00       	mov    $0x1,%esi
  401857:	48 89 c7             	mov    %rax,%rdi
  40185a:	e8 91 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  40185f:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  401863:	5b                   	pop    %rbx
  401864:	c3                   	ret    
  401865:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40186c:	00 00 00 00 

0000000000401870 <LoadPianoStretched>:

void LoadPianoStretched(Mix_Chunk **Notes) {
  401870:	53                   	push   %rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401871:	be 10 20 40 00       	mov    $0x402010,%esi
void LoadPianoStretched(Mix_Chunk **Notes) {
  401876:	48 89 fb             	mov    %rdi,%rbx
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  401879:	bf 4f 20 40 00       	mov    $0x40204f,%edi
  40187e:	e8 dd f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  401883:	be 01 00 00 00       	mov    $0x1,%esi
  401888:	48 89 c7             	mov    %rax,%rdi
  40188b:	e8 60 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  401890:	be 10 20 40 00       	mov    $0x402010,%esi
  401895:	bf 68 20 40 00       	mov    $0x402068,%edi
	Notes[0] = Mix_LoadWAV("Samples/do-stretched.wav");
  40189a:	48 89 03             	mov    %rax,(%rbx)
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  40189d:	e8 be f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4018a2:	be 01 00 00 00       	mov    $0x1,%esi
  4018a7:	48 89 c7             	mov    %rax,%rdi
  4018aa:	e8 41 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4018af:	be 10 20 40 00       	mov    $0x402010,%esi
  4018b4:	bf 81 20 40 00       	mov    $0x402081,%edi
    Notes[1] = Mix_LoadWAV("Samples/re-stretched.wav");
  4018b9:	48 89 43 08          	mov    %rax,0x8(%rbx)
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4018bd:	e8 9e f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4018c2:	be 01 00 00 00       	mov    $0x1,%esi
  4018c7:	48 89 c7             	mov    %rax,%rdi
  4018ca:	e8 21 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4018cf:	be 10 20 40 00       	mov    $0x402010,%esi
  4018d4:	bf 9a 20 40 00       	mov    $0x40209a,%edi
    Notes[2] = Mix_LoadWAV("Samples/mi-stretched.wav");
  4018d9:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Notes[3] = Mix_LoadWAV("Samples/fa-stretched.wav");
  4018dd:	e8 7e f7 ff ff       	call   401060 <SDL_RWFromFile@plt>
  4018e2:	be 01 00 00 00       	mov    $0x1,%esi
  4018e7:	48 89 c7             	mov    %rax,%rdi
  4018ea:	e8 01 f8 ff ff       	call   4010f0 <Mix_LoadWAV_RW@plt>
  4018ef:	48 89 43 18          	mov    %rax,0x18(%rbx)
}
  4018f3:	5b                   	pop    %rbx
  4018f4:	c3                   	ret    

Desmontagem da secção .fini:

00000000004018f8 <_fini>:
  4018f8:	f3 0f 1e fa          	endbr64 
  4018fc:	48 83 ec 08          	sub    $0x8,%rsp
  401900:	48 83 c4 08          	add    $0x8,%rsp
  401904:	c3                   	ret    
